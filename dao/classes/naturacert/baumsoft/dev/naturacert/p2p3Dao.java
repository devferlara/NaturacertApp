package naturacert.baumsoft.dev.naturacert;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import naturacert.baumsoft.dev.naturacert.p2p3;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table P2P3.
*/
public class p2p3Dao extends AbstractDao<p2p3, Long> {

    public static final String TABLENAME = "P2P3";

    /**
     * Properties of entity p2p3.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Apnuc = new Property(1, Integer.class, "apnuc", false, "APNUC");
        public final static Property Pnz = new Property(2, Integer.class, "pnz", false, "PNZ");
        public final static Property Rvs = new Property(3, Integer.class, "rvs", false, "RVS");
        public final static Property Azm = new Property(4, Integer.class, "azm", false, "AZM");
        public final static Property Spn = new Property(5, Integer.class, "spn", false, "SPN");
        public final static Property Rfp = new Property(6, Integer.class, "rfp", false, "RFP");
        public final static Property Pnr = new Property(7, Integer.class, "pnr", false, "PNR");
        public final static Property Dmi = new Property(8, Integer.class, "dmi", false, "DMI");
        public final static Property Dcs = new Property(9, Integer.class, "dcs", false, "DCS");
        public final static Property Arec = new Property(10, Integer.class, "arec", false, "AREC");
        public final static Property Rnsc = new Property(11, Integer.class, "rnsc", false, "RNSC");
        public final static Property Origen = new Property(12, Integer.class, "origen", false, "ORIGEN");
        public final static Property Obser = new Property(13, String.class, "obser", false, "OBSER");
        public final static Property Id_formulario = new Property(14, Integer.class, "id_formulario", false, "ID_FORMULARIO");
    };


    public p2p3Dao(DaoConfig config) {
        super(config);
    }
    
    public p2p3Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'P2P3' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'APNUC' INTEGER," + // 1: apnuc
                "'PNZ' INTEGER," + // 2: pnz
                "'RVS' INTEGER," + // 3: rvs
                "'AZM' INTEGER," + // 4: azm
                "'SPN' INTEGER," + // 5: spn
                "'RFP' INTEGER," + // 6: rfp
                "'PNR' INTEGER," + // 7: pnr
                "'DMI' INTEGER," + // 8: dmi
                "'DCS' INTEGER," + // 9: dcs
                "'AREC' INTEGER," + // 10: arec
                "'RNSC' INTEGER," + // 11: rnsc
                "'ORIGEN' INTEGER," + // 12: origen
                "'OBSER' TEXT," + // 13: obser
                "'ID_FORMULARIO' INTEGER);"); // 14: id_formulario
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'P2P3'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, p2p3 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer apnuc = entity.getApnuc();
        if (apnuc != null) {
            stmt.bindLong(2, apnuc);
        }
 
        Integer pnz = entity.getPnz();
        if (pnz != null) {
            stmt.bindLong(3, pnz);
        }
 
        Integer rvs = entity.getRvs();
        if (rvs != null) {
            stmt.bindLong(4, rvs);
        }
 
        Integer azm = entity.getAzm();
        if (azm != null) {
            stmt.bindLong(5, azm);
        }
 
        Integer spn = entity.getSpn();
        if (spn != null) {
            stmt.bindLong(6, spn);
        }
 
        Integer rfp = entity.getRfp();
        if (rfp != null) {
            stmt.bindLong(7, rfp);
        }
 
        Integer pnr = entity.getPnr();
        if (pnr != null) {
            stmt.bindLong(8, pnr);
        }
 
        Integer dmi = entity.getDmi();
        if (dmi != null) {
            stmt.bindLong(9, dmi);
        }
 
        Integer dcs = entity.getDcs();
        if (dcs != null) {
            stmt.bindLong(10, dcs);
        }
 
        Integer arec = entity.getArec();
        if (arec != null) {
            stmt.bindLong(11, arec);
        }
 
        Integer rnsc = entity.getRnsc();
        if (rnsc != null) {
            stmt.bindLong(12, rnsc);
        }
 
        Integer origen = entity.getOrigen();
        if (origen != null) {
            stmt.bindLong(13, origen);
        }
 
        String obser = entity.getObser();
        if (obser != null) {
            stmt.bindString(14, obser);
        }
 
        Integer id_formulario = entity.getId_formulario();
        if (id_formulario != null) {
            stmt.bindLong(15, id_formulario);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public p2p3 readEntity(Cursor cursor, int offset) {
        p2p3 entity = new p2p3( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // apnuc
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // pnz
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // rvs
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // azm
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // spn
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // rfp
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // pnr
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // dmi
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // dcs
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // arec
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // rnsc
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // origen
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // obser
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14) // id_formulario
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, p2p3 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setApnuc(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setPnz(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setRvs(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setAzm(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setSpn(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setRfp(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setPnr(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setDmi(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setDcs(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setArec(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setRnsc(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setOrigen(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setObser(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setId_formulario(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(p2p3 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(p2p3 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
