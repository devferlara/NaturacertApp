package naturacert.baumsoft.dev.naturacert;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import naturacert.baumsoft.dev.naturacert.p1p3;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table P1P3.
*/
public class p1p3Dao extends AbstractDao<p1p3, Long> {

    public static final String TABLENAME = "P1P3";

    /**
     * Properties of entity p1p3.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Dfdc = new Property(1, Integer.class, "dfdc", false, "DFDC");
        public final static Property Cyasp = new Property(2, Integer.class, "cyasp", false, "CYASP");
        public final static Property Adc = new Property(3, Integer.class, "adc", false, "ADC");
        public final static Property Aer = new Property(4, Integer.class, "aer", false, "AER");
        public final static Property Origen = new Property(5, Integer.class, "origen", false, "ORIGEN");
        public final static Property Obser = new Property(6, String.class, "obser", false, "OBSER");
        public final static Property Id_formulario = new Property(7, Integer.class, "id_formulario", false, "ID_FORMULARIO");
    };


    public p1p3Dao(DaoConfig config) {
        super(config);
    }
    
    public p1p3Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'P1P3' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'DFDC' INTEGER," + // 1: dfdc
                "'CYASP' INTEGER," + // 2: cyasp
                "'ADC' INTEGER," + // 3: adc
                "'AER' INTEGER," + // 4: aer
                "'ORIGEN' INTEGER," + // 5: origen
                "'OBSER' TEXT," + // 6: obser
                "'ID_FORMULARIO' INTEGER);"); // 7: id_formulario
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'P1P3'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, p1p3 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer dfdc = entity.getDfdc();
        if (dfdc != null) {
            stmt.bindLong(2, dfdc);
        }
 
        Integer cyasp = entity.getCyasp();
        if (cyasp != null) {
            stmt.bindLong(3, cyasp);
        }
 
        Integer adc = entity.getAdc();
        if (adc != null) {
            stmt.bindLong(4, adc);
        }
 
        Integer aer = entity.getAer();
        if (aer != null) {
            stmt.bindLong(5, aer);
        }
 
        Integer origen = entity.getOrigen();
        if (origen != null) {
            stmt.bindLong(6, origen);
        }
 
        String obser = entity.getObser();
        if (obser != null) {
            stmt.bindString(7, obser);
        }
 
        Integer id_formulario = entity.getId_formulario();
        if (id_formulario != null) {
            stmt.bindLong(8, id_formulario);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public p1p3 readEntity(Cursor cursor, int offset) {
        p1p3 entity = new p1p3( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // dfdc
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // cyasp
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // adc
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // aer
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // origen
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // obser
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // id_formulario
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, p1p3 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDfdc(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setCyasp(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setAdc(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setAer(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setOrigen(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setObser(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setId_formulario(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(p1p3 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(p1p3 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
