package naturacert.baumsoft.dev.naturacert;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import naturacert.baumsoft.dev.naturacert.Fincas;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FINCAS.
*/
public class FincasDao extends AbstractDao<Fincas, Long> {

    public static final String TABLENAME = "FINCAS";

    /**
     * Properties of entity Fincas.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Ref_finca = new Property(1, Integer.class, "ref_finca", false, "REF_FINCA");
        public final static Property Nombre = new Property(2, String.class, "nombre", false, "NOMBRE");
        public final static Property Tipo_finca = new Property(3, Integer.class, "tipo_finca", false, "TIPO_FINCA");
        public final static Property Id_formulario = new Property(4, Integer.class, "id_formulario", false, "ID_FORMULARIO");
        public final static Property Departamento = new Property(5, Long.class, "departamento", false, "DEPARTAMENTO");
        public final static Property Codigo = new Property(6, String.class, "codigo", false, "CODIGO");
        public final static Property Hora = new Property(7, String.class, "hora", false, "HORA");
        public final static Property Fecha = new Property(8, String.class, "fecha", false, "FECHA");
        public final static Property Imagen = new Property(9, String.class, "imagen", false, "IMAGEN");
        public final static Property Municipio = new Property(10, String.class, "municipio", false, "MUNICIPIO");
        public final static Property Vereda = new Property(11, String.class, "vereda", false, "VEREDA");
        public final static Property Latitud = new Property(12, Double.class, "latitud", false, "LATITUD");
        public final static Property Longitud = new Property(13, Double.class, "longitud", false, "LONGITUD");
        public final static Property Altitud = new Property(14, Integer.class, "altitud", false, "ALTITUD");
        public final static Property Grupo = new Property(15, String.class, "grupo", false, "GRUPO");
        public final static Property Tipo_auditoria = new Property(16, Long.class, "tipo_auditoria", false, "TIPO_AUDITORIA");
        public final static Property Tipo_auditor = new Property(17, Long.class, "tipo_auditor", false, "TIPO_AUDITOR");
        public final static Property Propietario = new Property(18, String.class, "propietario", false, "PROPIETARIO");
        public final static Property Area_finca = new Property(19, Integer.class, "area_finca", false, "AREA_FINCA");
        public final static Property Area_conservacion = new Property(20, Integer.class, "area_conservacion", false, "AREA_CONSERVACION");
        public final static Property Area_infraestructura = new Property(21, Integer.class, "area_infraestructura", false, "AREA_INFRAESTRUCTURA");
        public final static Property Periodo_cosecha = new Property(22, String.class, "periodo_cosecha", false, "PERIODO_COSECHA");
        public final static Property Produccion_regional = new Property(23, String.class, "produccion_regional", false, "PRODUCCION_REGIONAL");
        public final static Property Fr_cafe = new Property(24, Integer.class, "fr_cafe", false, "FR_CAFE");
        public final static Property Almendra_sana = new Property(25, String.class, "almendra_sana", false, "ALMENDRA_SANA");
        public final static Property Problemas_sanitarios = new Property(26, String.class, "problemas_sanitarios", false, "PROBLEMAS_SANITARIOS");
        public final static Property Documentos_anexos = new Property(27, String.class, "documentos_anexos", false, "DOCUMENTOS_ANEXOS");
        public final static Property Proveedores_visitados = new Property(28, String.class, "proveedores_visitados", false, "PROVEEDORES_VISITADOS");
        public final static Property Observaciones = new Property(29, String.class, "observaciones", false, "OBSERVACIONES");
        public final static Property IdCliente = new Property(30, long.class, "idCliente", false, "ID_CLIENTE");
        public final static Property IdAuditor = new Property(31, long.class, "idAuditor", false, "ID_AUDITOR");
    };

    private DaoSession daoSession;

    private Query<Fincas> clientes_ClientesQuery;
    private Query<Fincas> auditores_AuditoresQuery;

    public FincasDao(DaoConfig config) {
        super(config);
    }
    
    public FincasDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FINCAS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'REF_FINCA' INTEGER," + // 1: ref_finca
                "'NOMBRE' TEXT," + // 2: nombre
                "'TIPO_FINCA' INTEGER," + // 3: tipo_finca
                "'ID_FORMULARIO' INTEGER," + // 4: id_formulario
                "'DEPARTAMENTO' INTEGER," + // 5: departamento
                "'CODIGO' TEXT," + // 6: codigo
                "'HORA' TEXT," + // 7: hora
                "'FECHA' TEXT," + // 8: fecha
                "'IMAGEN' TEXT," + // 9: imagen
                "'MUNICIPIO' TEXT," + // 10: municipio
                "'VEREDA' TEXT," + // 11: vereda
                "'LATITUD' REAL," + // 12: latitud
                "'LONGITUD' REAL," + // 13: longitud
                "'ALTITUD' INTEGER," + // 14: altitud
                "'GRUPO' TEXT," + // 15: grupo
                "'TIPO_AUDITORIA' INTEGER," + // 16: tipo_auditoria
                "'TIPO_AUDITOR' INTEGER," + // 17: tipo_auditor
                "'PROPIETARIO' TEXT," + // 18: propietario
                "'AREA_FINCA' INTEGER," + // 19: area_finca
                "'AREA_CONSERVACION' INTEGER," + // 20: area_conservacion
                "'AREA_INFRAESTRUCTURA' INTEGER," + // 21: area_infraestructura
                "'PERIODO_COSECHA' TEXT," + // 22: periodo_cosecha
                "'PRODUCCION_REGIONAL' TEXT," + // 23: produccion_regional
                "'FR_CAFE' INTEGER," + // 24: fr_cafe
                "'ALMENDRA_SANA' TEXT," + // 25: almendra_sana
                "'PROBLEMAS_SANITARIOS' TEXT," + // 26: problemas_sanitarios
                "'DOCUMENTOS_ANEXOS' TEXT," + // 27: documentos_anexos
                "'PROVEEDORES_VISITADOS' TEXT," + // 28: proveedores_visitados
                "'OBSERVACIONES' TEXT," + // 29: observaciones
                "'ID_CLIENTE' INTEGER NOT NULL ," + // 30: idCliente
                "'ID_AUDITOR' INTEGER NOT NULL );"); // 31: idAuditor
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FINCAS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Fincas entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer ref_finca = entity.getRef_finca();
        if (ref_finca != null) {
            stmt.bindLong(2, ref_finca);
        }
 
        String nombre = entity.getNombre();
        if (nombre != null) {
            stmt.bindString(3, nombre);
        }
 
        Integer tipo_finca = entity.getTipo_finca();
        if (tipo_finca != null) {
            stmt.bindLong(4, tipo_finca);
        }
 
        Integer id_formulario = entity.getId_formulario();
        if (id_formulario != null) {
            stmt.bindLong(5, id_formulario);
        }
 
        Long departamento = entity.getDepartamento();
        if (departamento != null) {
            stmt.bindLong(6, departamento);
        }
 
        String codigo = entity.getCodigo();
        if (codigo != null) {
            stmt.bindString(7, codigo);
        }
 
        String hora = entity.getHora();
        if (hora != null) {
            stmt.bindString(8, hora);
        }
 
        String fecha = entity.getFecha();
        if (fecha != null) {
            stmt.bindString(9, fecha);
        }
 
        String imagen = entity.getImagen();
        if (imagen != null) {
            stmt.bindString(10, imagen);
        }
 
        String municipio = entity.getMunicipio();
        if (municipio != null) {
            stmt.bindString(11, municipio);
        }
 
        String vereda = entity.getVereda();
        if (vereda != null) {
            stmt.bindString(12, vereda);
        }
 
        Double latitud = entity.getLatitud();
        if (latitud != null) {
            stmt.bindDouble(13, latitud);
        }
 
        Double longitud = entity.getLongitud();
        if (longitud != null) {
            stmt.bindDouble(14, longitud);
        }
 
        Integer altitud = entity.getAltitud();
        if (altitud != null) {
            stmt.bindLong(15, altitud);
        }
 
        String grupo = entity.getGrupo();
        if (grupo != null) {
            stmt.bindString(16, grupo);
        }
 
        Long tipo_auditoria = entity.getTipo_auditoria();
        if (tipo_auditoria != null) {
            stmt.bindLong(17, tipo_auditoria);
        }
 
        Long tipo_auditor = entity.getTipo_auditor();
        if (tipo_auditor != null) {
            stmt.bindLong(18, tipo_auditor);
        }
 
        String propietario = entity.getPropietario();
        if (propietario != null) {
            stmt.bindString(19, propietario);
        }
 
        Integer area_finca = entity.getArea_finca();
        if (area_finca != null) {
            stmt.bindLong(20, area_finca);
        }
 
        Integer area_conservacion = entity.getArea_conservacion();
        if (area_conservacion != null) {
            stmt.bindLong(21, area_conservacion);
        }
 
        Integer area_infraestructura = entity.getArea_infraestructura();
        if (area_infraestructura != null) {
            stmt.bindLong(22, area_infraestructura);
        }
 
        String periodo_cosecha = entity.getPeriodo_cosecha();
        if (periodo_cosecha != null) {
            stmt.bindString(23, periodo_cosecha);
        }
 
        String produccion_regional = entity.getProduccion_regional();
        if (produccion_regional != null) {
            stmt.bindString(24, produccion_regional);
        }
 
        Integer fr_cafe = entity.getFr_cafe();
        if (fr_cafe != null) {
            stmt.bindLong(25, fr_cafe);
        }
 
        String almendra_sana = entity.getAlmendra_sana();
        if (almendra_sana != null) {
            stmt.bindString(26, almendra_sana);
        }
 
        String problemas_sanitarios = entity.getProblemas_sanitarios();
        if (problemas_sanitarios != null) {
            stmt.bindString(27, problemas_sanitarios);
        }
 
        String documentos_anexos = entity.getDocumentos_anexos();
        if (documentos_anexos != null) {
            stmt.bindString(28, documentos_anexos);
        }
 
        String proveedores_visitados = entity.getProveedores_visitados();
        if (proveedores_visitados != null) {
            stmt.bindString(29, proveedores_visitados);
        }
 
        String observaciones = entity.getObservaciones();
        if (observaciones != null) {
            stmt.bindString(30, observaciones);
        }
        stmt.bindLong(31, entity.getIdCliente());
        stmt.bindLong(32, entity.getIdAuditor());
    }

    @Override
    protected void attachEntity(Fincas entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Fincas readEntity(Cursor cursor, int offset) {
        Fincas entity = new Fincas( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // ref_finca
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nombre
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // tipo_finca
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // id_formulario
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // departamento
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // codigo
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // hora
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // fecha
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // imagen
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // municipio
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // vereda
            cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12), // latitud
            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // longitud
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // altitud
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // grupo
            cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16), // tipo_auditoria
            cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17), // tipo_auditor
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // propietario
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // area_finca
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // area_conservacion
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // area_infraestructura
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // periodo_cosecha
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // produccion_regional
            cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24), // fr_cafe
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // almendra_sana
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // problemas_sanitarios
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // documentos_anexos
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // proveedores_visitados
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // observaciones
            cursor.getLong(offset + 30), // idCliente
            cursor.getLong(offset + 31) // idAuditor
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Fincas entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRef_finca(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setNombre(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTipo_finca(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setId_formulario(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setDepartamento(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setCodigo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHora(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFecha(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setImagen(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMunicipio(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setVereda(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLatitud(cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12));
        entity.setLongitud(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
        entity.setAltitud(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setGrupo(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setTipo_auditoria(cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16));
        entity.setTipo_auditor(cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17));
        entity.setPropietario(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setArea_finca(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setArea_conservacion(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setArea_infraestructura(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setPeriodo_cosecha(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setProduccion_regional(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setFr_cafe(cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24));
        entity.setAlmendra_sana(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setProblemas_sanitarios(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setDocumentos_anexos(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setProveedores_visitados(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setObservaciones(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setIdCliente(cursor.getLong(offset + 30));
        entity.setIdAuditor(cursor.getLong(offset + 31));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Fincas entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Fincas entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "Clientes" to-many relationship of Clientes. */
    public List<Fincas> _queryClientes_Clientes(long idCliente) {
        synchronized (this) {
            if (clientes_ClientesQuery == null) {
                QueryBuilder<Fincas> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.IdCliente.eq(null));
                clientes_ClientesQuery = queryBuilder.build();
            }
        }
        Query<Fincas> query = clientes_ClientesQuery.forCurrentThread();
        query.setParameter(0, idCliente);
        return query.list();
    }

    /** Internal query to resolve the "Auditores" to-many relationship of Auditores. */
    public List<Fincas> _queryAuditores_Auditores(long idAuditor) {
        synchronized (this) {
            if (auditores_AuditoresQuery == null) {
                QueryBuilder<Fincas> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.IdAuditor.eq(null));
                auditores_AuditoresQuery = queryBuilder.build();
            }
        }
        Query<Fincas> query = auditores_AuditoresQuery.forCurrentThread();
        query.setParameter(0, idAuditor);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getClientesDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getAuditoresDao().getAllColumns());
            builder.append(" FROM FINCAS T");
            builder.append(" LEFT JOIN CLIENTES T0 ON T.'ID_CLIENTE'=T0.'_id'");
            builder.append(" LEFT JOIN AUDITORES T1 ON T.'ID_AUDITOR'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Fincas loadCurrentDeep(Cursor cursor, boolean lock) {
        Fincas entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Clientes clientes = loadCurrentOther(daoSession.getClientesDao(), cursor, offset);
         if(clientes != null) {
            entity.setClientes(clientes);
        }
        offset += daoSession.getClientesDao().getAllColumns().length;

        Auditores auditores = loadCurrentOther(daoSession.getAuditoresDao(), cursor, offset);
         if(auditores != null) {
            entity.setAuditores(auditores);
        }

        return entity;    
    }

    public Fincas loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Fincas> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Fincas> list = new ArrayList<Fincas>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Fincas> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Fincas> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
