package naturacert.baumsoft.dev.naturacert;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import naturacert.baumsoft.dev.naturacert.p1p1;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table P1P1.
*/
public class p1p1Dao extends AbstractDao<p1p1, Long> {

    public static final String TABLENAME = "P1P1";

    /**
     * Properties of entity p1p1.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Sgsate = new Property(1, Integer.class, "sgsate", false, "SGSATE");
        public final static Property Sgsa = new Property(2, Integer.class, "sgsa", false, "SGSA");
        public final static Property Politicas = new Property(3, Integer.class, "politicas", false, "POLITICAS");
        public final static Property Programas = new Property(4, Integer.class, "programas", false, "PROGRAMAS");
        public final static Property Procedimientos = new Property(5, Integer.class, "procedimientos", false, "PROCEDIMIENTOS");
        public final static Property Sociales = new Property(6, Integer.class, "sociales", false, "SOCIALES");
        public final static Property Laborales = new Property(7, Integer.class, "laborales", false, "LABORALES");
        public final static Property Ambientales = new Property(8, Integer.class, "ambientales", false, "AMBIENTALES");
        public final static Property Origen = new Property(9, Integer.class, "origen", false, "ORIGEN");
        public final static Property Id_formulario = new Property(10, Integer.class, "id_formulario", false, "ID_FORMULARIO");
        public final static Property Observaciones = new Property(11, String.class, "observaciones", false, "OBSERVACIONES");
    };


    public p1p1Dao(DaoConfig config) {
        super(config);
    }
    
    public p1p1Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'P1P1' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'SGSATE' INTEGER," + // 1: sgsate
                "'SGSA' INTEGER," + // 2: sgsa
                "'POLITICAS' INTEGER," + // 3: politicas
                "'PROGRAMAS' INTEGER," + // 4: programas
                "'PROCEDIMIENTOS' INTEGER," + // 5: procedimientos
                "'SOCIALES' INTEGER," + // 6: sociales
                "'LABORALES' INTEGER," + // 7: laborales
                "'AMBIENTALES' INTEGER," + // 8: ambientales
                "'ORIGEN' INTEGER," + // 9: origen
                "'ID_FORMULARIO' INTEGER," + // 10: id_formulario
                "'OBSERVACIONES' TEXT);"); // 11: observaciones
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'P1P1'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, p1p1 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer sgsate = entity.getSgsate();
        if (sgsate != null) {
            stmt.bindLong(2, sgsate);
        }
 
        Integer sgsa = entity.getSgsa();
        if (sgsa != null) {
            stmt.bindLong(3, sgsa);
        }
 
        Integer politicas = entity.getPoliticas();
        if (politicas != null) {
            stmt.bindLong(4, politicas);
        }
 
        Integer programas = entity.getProgramas();
        if (programas != null) {
            stmt.bindLong(5, programas);
        }
 
        Integer procedimientos = entity.getProcedimientos();
        if (procedimientos != null) {
            stmt.bindLong(6, procedimientos);
        }
 
        Integer sociales = entity.getSociales();
        if (sociales != null) {
            stmt.bindLong(7, sociales);
        }
 
        Integer laborales = entity.getLaborales();
        if (laborales != null) {
            stmt.bindLong(8, laborales);
        }
 
        Integer ambientales = entity.getAmbientales();
        if (ambientales != null) {
            stmt.bindLong(9, ambientales);
        }
 
        Integer origen = entity.getOrigen();
        if (origen != null) {
            stmt.bindLong(10, origen);
        }
 
        Integer id_formulario = entity.getId_formulario();
        if (id_formulario != null) {
            stmt.bindLong(11, id_formulario);
        }
 
        String observaciones = entity.getObservaciones();
        if (observaciones != null) {
            stmt.bindString(12, observaciones);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public p1p1 readEntity(Cursor cursor, int offset) {
        p1p1 entity = new p1p1( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // sgsate
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // sgsa
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // politicas
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // programas
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // procedimientos
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // sociales
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // laborales
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // ambientales
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // origen
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // id_formulario
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // observaciones
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, p1p1 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSgsate(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setSgsa(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setPoliticas(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setProgramas(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setProcedimientos(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setSociales(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setLaborales(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setAmbientales(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setOrigen(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setId_formulario(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setObservaciones(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(p1p1 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(p1p1 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
