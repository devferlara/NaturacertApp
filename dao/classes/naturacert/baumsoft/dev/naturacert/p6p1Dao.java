package naturacert.baumsoft.dev.naturacert;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import naturacert.baumsoft.dev.naturacert.p6p1;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table P6P1.
*/
public class p6p1Dao extends AbstractDao<p6p1, Long> {

    public static final String TABLENAME = "P6P1";

    /**
     * Properties of entity p6p1.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Lfdi = new Property(1, Integer.class, "lfdi", false, "LFDI");
        public final static Property Eupd = new Property(2, Integer.class, "eupd", false, "EUPD");
        public final static Property Epcc = new Property(3, Integer.class, "epcc", false, "EPCC");
        public final static Property Pccp = new Property(4, Integer.class, "pccp", false, "PCCP");
        public final static Property Nudt = new Property(5, Integer.class, "nudt", false, "NUDT");
        public final static Property Pccr = new Property(6, Integer.class, "pccr", false, "PCCR");
        public final static Property Ltpe = new Property(7, Integer.class, "ltpe", false, "LTPE");
        public final static Property Ladr = new Property(8, Integer.class, "ladr", false, "LADR");
        public final static Property Madr = new Property(9, Integer.class, "madr", false, "MADR");
        public final static Property Sena = new Property(10, Integer.class, "sena", false, "SENA");
        public final static Property Ucds = new Property(11, Integer.class, "ucds", false, "UCDS");
        public final static Property Peps = new Property(12, Integer.class, "peps", false, "PEPS");
        public final static Property Origen = new Property(13, Integer.class, "origen", false, "ORIGEN");
        public final static Property Id_formulario = new Property(14, Integer.class, "id_formulario", false, "ID_FORMULARIO");
        public final static Property Observaciones = new Property(15, String.class, "observaciones", false, "OBSERVACIONES");
    };


    public p6p1Dao(DaoConfig config) {
        super(config);
    }
    
    public p6p1Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'P6P1' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'LFDI' INTEGER," + // 1: lfdi
                "'EUPD' INTEGER," + // 2: eupd
                "'EPCC' INTEGER," + // 3: epcc
                "'PCCP' INTEGER," + // 4: pccp
                "'NUDT' INTEGER," + // 5: nudt
                "'PCCR' INTEGER," + // 6: pccr
                "'LTPE' INTEGER," + // 7: ltpe
                "'LADR' INTEGER," + // 8: ladr
                "'MADR' INTEGER," + // 9: madr
                "'SENA' INTEGER," + // 10: sena
                "'UCDS' INTEGER," + // 11: ucds
                "'PEPS' INTEGER," + // 12: peps
                "'ORIGEN' INTEGER," + // 13: origen
                "'ID_FORMULARIO' INTEGER," + // 14: id_formulario
                "'OBSERVACIONES' TEXT);"); // 15: observaciones
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'P6P1'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, p6p1 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer lfdi = entity.getLfdi();
        if (lfdi != null) {
            stmt.bindLong(2, lfdi);
        }
 
        Integer eupd = entity.getEupd();
        if (eupd != null) {
            stmt.bindLong(3, eupd);
        }
 
        Integer epcc = entity.getEpcc();
        if (epcc != null) {
            stmt.bindLong(4, epcc);
        }
 
        Integer pccp = entity.getPccp();
        if (pccp != null) {
            stmt.bindLong(5, pccp);
        }
 
        Integer nudt = entity.getNudt();
        if (nudt != null) {
            stmt.bindLong(6, nudt);
        }
 
        Integer pccr = entity.getPccr();
        if (pccr != null) {
            stmt.bindLong(7, pccr);
        }
 
        Integer ltpe = entity.getLtpe();
        if (ltpe != null) {
            stmt.bindLong(8, ltpe);
        }
 
        Integer ladr = entity.getLadr();
        if (ladr != null) {
            stmt.bindLong(9, ladr);
        }
 
        Integer madr = entity.getMadr();
        if (madr != null) {
            stmt.bindLong(10, madr);
        }
 
        Integer sena = entity.getSena();
        if (sena != null) {
            stmt.bindLong(11, sena);
        }
 
        Integer ucds = entity.getUcds();
        if (ucds != null) {
            stmt.bindLong(12, ucds);
        }
 
        Integer peps = entity.getPeps();
        if (peps != null) {
            stmt.bindLong(13, peps);
        }
 
        Integer origen = entity.getOrigen();
        if (origen != null) {
            stmt.bindLong(14, origen);
        }
 
        Integer id_formulario = entity.getId_formulario();
        if (id_formulario != null) {
            stmt.bindLong(15, id_formulario);
        }
 
        String observaciones = entity.getObservaciones();
        if (observaciones != null) {
            stmt.bindString(16, observaciones);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public p6p1 readEntity(Cursor cursor, int offset) {
        p6p1 entity = new p6p1( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // lfdi
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // eupd
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // epcc
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // pccp
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // nudt
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // pccr
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // ltpe
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // ladr
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // madr
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // sena
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // ucds
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // peps
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // origen
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // id_formulario
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // observaciones
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, p6p1 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLfdi(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setEupd(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setEpcc(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setPccp(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setNudt(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setPccr(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setLtpe(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setLadr(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setMadr(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setSena(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setUcds(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setPeps(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setOrigen(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setId_formulario(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setObservaciones(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(p6p1 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(p6p1 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
