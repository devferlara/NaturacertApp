package naturacert.baumsoft.dev.naturacert;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import naturacert.baumsoft.dev.naturacert.p2p1;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table P2P1.
*/
public class p2p1Dao extends AbstractDao<p2p1, Long> {

    public static final String TABLENAME = "P2P1";

    /**
     * Properties of entity p2p1.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Eco_pro_rec = new Property(1, Integer.class, "eco_pro_rec", false, "ECO_PRO_REC");
        public final static Property Eco_nat = new Property(2, Integer.class, "eco_nat", false, "ECO_NAT");
        public final static Property Prog_con = new Property(3, Integer.class, "prog_con", false, "PROG_CON");
        public final static Property Iden_eco = new Property(4, Integer.class, "iden_eco", false, "IDEN_ECO");
        public final static Property Pro_eco = new Property(5, Integer.class, "pro_eco", false, "PRO_ECO");
        public final static Property Rec_eco = new Property(6, Integer.class, "rec_eco", false, "REC_ECO");
        public final static Property Prog_inc_eco = new Property(7, Integer.class, "prog_inc_eco", false, "PROG_INC_ECO");
        public final static Property Origen = new Property(8, Integer.class, "origen", false, "ORIGEN");
        public final static Property Obser = new Property(9, String.class, "obser", false, "OBSER");
        public final static Property Id_formulario = new Property(10, Integer.class, "id_formulario", false, "ID_FORMULARIO");
    };


    public p2p1Dao(DaoConfig config) {
        super(config);
    }
    
    public p2p1Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'P2P1' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ECO_PRO_REC' INTEGER," + // 1: eco_pro_rec
                "'ECO_NAT' INTEGER," + // 2: eco_nat
                "'PROG_CON' INTEGER," + // 3: prog_con
                "'IDEN_ECO' INTEGER," + // 4: iden_eco
                "'PRO_ECO' INTEGER," + // 5: pro_eco
                "'REC_ECO' INTEGER," + // 6: rec_eco
                "'PROG_INC_ECO' INTEGER," + // 7: prog_inc_eco
                "'ORIGEN' INTEGER," + // 8: origen
                "'OBSER' TEXT," + // 9: obser
                "'ID_FORMULARIO' INTEGER);"); // 10: id_formulario
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'P2P1'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, p2p1 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer eco_pro_rec = entity.getEco_pro_rec();
        if (eco_pro_rec != null) {
            stmt.bindLong(2, eco_pro_rec);
        }
 
        Integer eco_nat = entity.getEco_nat();
        if (eco_nat != null) {
            stmt.bindLong(3, eco_nat);
        }
 
        Integer prog_con = entity.getProg_con();
        if (prog_con != null) {
            stmt.bindLong(4, prog_con);
        }
 
        Integer iden_eco = entity.getIden_eco();
        if (iden_eco != null) {
            stmt.bindLong(5, iden_eco);
        }
 
        Integer pro_eco = entity.getPro_eco();
        if (pro_eco != null) {
            stmt.bindLong(6, pro_eco);
        }
 
        Integer rec_eco = entity.getRec_eco();
        if (rec_eco != null) {
            stmt.bindLong(7, rec_eco);
        }
 
        Integer prog_inc_eco = entity.getProg_inc_eco();
        if (prog_inc_eco != null) {
            stmt.bindLong(8, prog_inc_eco);
        }
 
        Integer origen = entity.getOrigen();
        if (origen != null) {
            stmt.bindLong(9, origen);
        }
 
        String obser = entity.getObser();
        if (obser != null) {
            stmt.bindString(10, obser);
        }
 
        Integer id_formulario = entity.getId_formulario();
        if (id_formulario != null) {
            stmt.bindLong(11, id_formulario);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public p2p1 readEntity(Cursor cursor, int offset) {
        p2p1 entity = new p2p1( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // eco_pro_rec
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // eco_nat
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // prog_con
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // iden_eco
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // pro_eco
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // rec_eco
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // prog_inc_eco
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // origen
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // obser
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10) // id_formulario
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, p2p1 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEco_pro_rec(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setEco_nat(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setProg_con(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setIden_eco(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setPro_eco(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setRec_eco(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setProg_inc_eco(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setOrigen(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setObser(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setId_formulario(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(p2p1 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(p2p1 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
