package naturacert.baumsoft.dev.naturacert;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import naturacert.baumsoft.dev.naturacert.p2p6;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table P2P6.
*/
public class p2p6Dao extends AbstractDao<p2p6, Long> {

    public static final String TABLENAME = "P2P6";

    /**
     * Properties of entity p2p6.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nea = new Property(1, Integer.class, "nea", false, "NEA");
        public final static Property Aea = new Property(2, Integer.class, "aea", false, "AEA");
        public final static Property Erosion = new Property(3, Integer.class, "erosion", false, "EROSION");
        public final static Property Deriva = new Property(4, Integer.class, "deriva", false, "DERIVA");
        public final static Property Escagro = new Property(5, Integer.class, "escagro", false, "ESCAGRO");
        public final static Property Pcn = new Property(6, Integer.class, "pcn", false, "PCN");
        public final static Property Decyc = new Property(7, String.class, "decyc", false, "DECYC");
        public final static Property Ucv = new Property(8, Integer.class, "ucv", false, "UCV");
        public final static Property Origen = new Property(9, Integer.class, "origen", false, "ORIGEN");
        public final static Property Obser = new Property(10, String.class, "obser", false, "OBSER");
        public final static Property Id_formulario = new Property(11, Integer.class, "id_formulario", false, "ID_FORMULARIO");
    };


    public p2p6Dao(DaoConfig config) {
        super(config);
    }
    
    public p2p6Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'P2P6' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NEA' INTEGER," + // 1: nea
                "'AEA' INTEGER," + // 2: aea
                "'EROSION' INTEGER," + // 3: erosion
                "'DERIVA' INTEGER," + // 4: deriva
                "'ESCAGRO' INTEGER," + // 5: escagro
                "'PCN' INTEGER," + // 6: pcn
                "'DECYC' TEXT," + // 7: decyc
                "'UCV' INTEGER," + // 8: ucv
                "'ORIGEN' INTEGER," + // 9: origen
                "'OBSER' TEXT," + // 10: obser
                "'ID_FORMULARIO' INTEGER);"); // 11: id_formulario
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'P2P6'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, p2p6 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer nea = entity.getNea();
        if (nea != null) {
            stmt.bindLong(2, nea);
        }
 
        Integer aea = entity.getAea();
        if (aea != null) {
            stmt.bindLong(3, aea);
        }
 
        Integer erosion = entity.getErosion();
        if (erosion != null) {
            stmt.bindLong(4, erosion);
        }
 
        Integer deriva = entity.getDeriva();
        if (deriva != null) {
            stmt.bindLong(5, deriva);
        }
 
        Integer escagro = entity.getEscagro();
        if (escagro != null) {
            stmt.bindLong(6, escagro);
        }
 
        Integer pcn = entity.getPcn();
        if (pcn != null) {
            stmt.bindLong(7, pcn);
        }
 
        String decyc = entity.getDecyc();
        if (decyc != null) {
            stmt.bindString(8, decyc);
        }
 
        Integer ucv = entity.getUcv();
        if (ucv != null) {
            stmt.bindLong(9, ucv);
        }
 
        Integer origen = entity.getOrigen();
        if (origen != null) {
            stmt.bindLong(10, origen);
        }
 
        String obser = entity.getObser();
        if (obser != null) {
            stmt.bindString(11, obser);
        }
 
        Integer id_formulario = entity.getId_formulario();
        if (id_formulario != null) {
            stmt.bindLong(12, id_formulario);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public p2p6 readEntity(Cursor cursor, int offset) {
        p2p6 entity = new p2p6( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // nea
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // aea
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // erosion
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // deriva
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // escagro
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // pcn
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // decyc
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // ucv
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // origen
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // obser
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11) // id_formulario
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, p2p6 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNea(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setAea(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setErosion(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setDeriva(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setEscagro(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setPcn(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setDecyc(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUcv(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setOrigen(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setObser(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setId_formulario(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(p2p6 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(p2p6 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
