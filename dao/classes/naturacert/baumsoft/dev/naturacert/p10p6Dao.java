package naturacert.baumsoft.dev.naturacert;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import naturacert.baumsoft.dev.naturacert.p10p6;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table P10P6.
*/
public class p10p6Dao extends AbstractDao<p10p6, Long> {

    public static final String TABLENAME = "P10P6";

    /**
     * Properties of entity p10p6.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Fiprg = new Property(1, Integer.class, "fiprg", false, "FIPRG");
        public final static Property Iprg = new Property(2, Integer.class, "iprg", false, "IPRG");
        public final static Property Ipcd = new Property(3, Integer.class, "ipcd", false, "IPCD");
        public final static Property Cobs = new Property(4, Integer.class, "cobs", false, "COBS");
        public final static Property Sia = new Property(5, Integer.class, "sia", false, "SIA");
        public final static Property Mac = new Property(6, Integer.class, "mac", false, "MAC");
        public final static Property Maf = new Property(7, Integer.class, "maf", false, "MAF");
        public final static Property Uee = new Property(8, Integer.class, "uee", false, "UEE");
        public final static Property Mir = new Property(9, Integer.class, "mir", false, "MIR");
        public final static Property Utl = new Property(10, Integer.class, "utl", false, "UTL");
        public final static Property Mpps = new Property(11, Integer.class, "mpps", false, "MPPS");
        public final static Property Pirg = new Property(12, Integer.class, "pirg", false, "PIRG");
        public final static Property Mpta = new Property(13, Integer.class, "mpta", false, "MPTA");
        public final static Property Origen = new Property(14, Integer.class, "origen", false, "ORIGEN");
        public final static Property Obser = new Property(15, String.class, "obser", false, "OBSER");
        public final static Property Id_formulario = new Property(16, Integer.class, "id_formulario", false, "ID_FORMULARIO");
    };


    public p10p6Dao(DaoConfig config) {
        super(config);
    }
    
    public p10p6Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'P10P6' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'FIPRG' INTEGER," + // 1: fiprg
                "'IPRG' INTEGER," + // 2: iprg
                "'IPCD' INTEGER," + // 3: ipcd
                "'COBS' INTEGER," + // 4: cobs
                "'SIA' INTEGER," + // 5: sia
                "'MAC' INTEGER," + // 6: mac
                "'MAF' INTEGER," + // 7: maf
                "'UEE' INTEGER," + // 8: uee
                "'MIR' INTEGER," + // 9: mir
                "'UTL' INTEGER," + // 10: utl
                "'MPPS' INTEGER," + // 11: mpps
                "'PIRG' INTEGER," + // 12: pirg
                "'MPTA' INTEGER," + // 13: mpta
                "'ORIGEN' INTEGER," + // 14: origen
                "'OBSER' TEXT," + // 15: obser
                "'ID_FORMULARIO' INTEGER);"); // 16: id_formulario
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'P10P6'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, p10p6 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer fiprg = entity.getFiprg();
        if (fiprg != null) {
            stmt.bindLong(2, fiprg);
        }
 
        Integer iprg = entity.getIprg();
        if (iprg != null) {
            stmt.bindLong(3, iprg);
        }
 
        Integer ipcd = entity.getIpcd();
        if (ipcd != null) {
            stmt.bindLong(4, ipcd);
        }
 
        Integer cobs = entity.getCobs();
        if (cobs != null) {
            stmt.bindLong(5, cobs);
        }
 
        Integer sia = entity.getSia();
        if (sia != null) {
            stmt.bindLong(6, sia);
        }
 
        Integer mac = entity.getMac();
        if (mac != null) {
            stmt.bindLong(7, mac);
        }
 
        Integer maf = entity.getMaf();
        if (maf != null) {
            stmt.bindLong(8, maf);
        }
 
        Integer uee = entity.getUee();
        if (uee != null) {
            stmt.bindLong(9, uee);
        }
 
        Integer mir = entity.getMir();
        if (mir != null) {
            stmt.bindLong(10, mir);
        }
 
        Integer utl = entity.getUtl();
        if (utl != null) {
            stmt.bindLong(11, utl);
        }
 
        Integer mpps = entity.getMpps();
        if (mpps != null) {
            stmt.bindLong(12, mpps);
        }
 
        Integer pirg = entity.getPirg();
        if (pirg != null) {
            stmt.bindLong(13, pirg);
        }
 
        Integer mpta = entity.getMpta();
        if (mpta != null) {
            stmt.bindLong(14, mpta);
        }
 
        Integer origen = entity.getOrigen();
        if (origen != null) {
            stmt.bindLong(15, origen);
        }
 
        String obser = entity.getObser();
        if (obser != null) {
            stmt.bindString(16, obser);
        }
 
        Integer id_formulario = entity.getId_formulario();
        if (id_formulario != null) {
            stmt.bindLong(17, id_formulario);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public p10p6 readEntity(Cursor cursor, int offset) {
        p10p6 entity = new p10p6( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // fiprg
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // iprg
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // ipcd
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // cobs
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // sia
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // mac
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // maf
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // uee
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // mir
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // utl
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // mpps
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // pirg
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // mpta
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // origen
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // obser
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16) // id_formulario
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, p10p6 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFiprg(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setIprg(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setIpcd(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setCobs(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setSia(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setMac(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setMaf(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setUee(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setMir(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setUtl(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setMpps(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setPirg(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setMpta(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setOrigen(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setObser(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setId_formulario(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(p10p6 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(p10p6 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
