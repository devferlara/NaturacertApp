package naturacert.baumsoft.dev.naturacert;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import naturacert.baumsoft.dev.naturacert.p1p11;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table P1P11.
*/
public class p1p11Dao extends AbstractDao<p1p11, Long> {

    public static final String TABLENAME = "P1P11";

    /**
     * Properties of entity p1p11.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Dfep = new Property(1, Integer.class, "dfep", false, "DFEP");
        public final static Property Pdp = new Property(2, Integer.class, "pdp", false, "PDP");
        public final static Property Tran = new Property(3, Integer.class, "tran", false, "TRAN");
        public final static Property Udom = new Property(4, Integer.class, "udom", false, "UDOM");
        public final static Property Pedn = new Property(5, Integer.class, "pedn", false, "PEDN");
        public final static Property Rce = new Property(6, Integer.class, "rce", false, "RCE");
        public final static Property Origen = new Property(7, Integer.class, "origen", false, "ORIGEN");
        public final static Property Id_formulario = new Property(8, Integer.class, "id_formulario", false, "ID_FORMULARIO");
        public final static Property Observaciones = new Property(9, String.class, "observaciones", false, "OBSERVACIONES");
    };


    public p1p11Dao(DaoConfig config) {
        super(config);
    }
    
    public p1p11Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'P1P11' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'DFEP' INTEGER," + // 1: dfep
                "'PDP' INTEGER," + // 2: pdp
                "'TRAN' INTEGER," + // 3: tran
                "'UDOM' INTEGER," + // 4: udom
                "'PEDN' INTEGER," + // 5: pedn
                "'RCE' INTEGER," + // 6: rce
                "'ORIGEN' INTEGER," + // 7: origen
                "'ID_FORMULARIO' INTEGER," + // 8: id_formulario
                "'OBSERVACIONES' TEXT);"); // 9: observaciones
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'P1P11'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, p1p11 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer dfep = entity.getDfep();
        if (dfep != null) {
            stmt.bindLong(2, dfep);
        }
 
        Integer pdp = entity.getPdp();
        if (pdp != null) {
            stmt.bindLong(3, pdp);
        }
 
        Integer tran = entity.getTran();
        if (tran != null) {
            stmt.bindLong(4, tran);
        }
 
        Integer udom = entity.getUdom();
        if (udom != null) {
            stmt.bindLong(5, udom);
        }
 
        Integer pedn = entity.getPedn();
        if (pedn != null) {
            stmt.bindLong(6, pedn);
        }
 
        Integer rce = entity.getRce();
        if (rce != null) {
            stmt.bindLong(7, rce);
        }
 
        Integer origen = entity.getOrigen();
        if (origen != null) {
            stmt.bindLong(8, origen);
        }
 
        Integer id_formulario = entity.getId_formulario();
        if (id_formulario != null) {
            stmt.bindLong(9, id_formulario);
        }
 
        String observaciones = entity.getObservaciones();
        if (observaciones != null) {
            stmt.bindString(10, observaciones);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public p1p11 readEntity(Cursor cursor, int offset) {
        p1p11 entity = new p1p11( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // dfep
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // pdp
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // tran
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // udom
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // pedn
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // rce
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // origen
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // id_formulario
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // observaciones
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, p1p11 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDfep(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setPdp(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setTran(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setUdom(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setPedn(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setRce(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setOrigen(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setId_formulario(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setObservaciones(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(p1p11 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(p1p11 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
