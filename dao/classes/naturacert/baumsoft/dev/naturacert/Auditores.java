package naturacert.baumsoft.dev.naturacert;

import java.util.List;
import naturacert.baumsoft.dev.naturacert.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table AUDITORES.
 */
public class Auditores {

    private Long id;
    private String usuario;
    private String nombre;
    private String apellido;
    private String foto;
    private Integer ref_auditor;
    private long idToken;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AuditoresDao myDao;

    private TokensBD tokensBD;
    private Long tokensBD__resolvedKey;

    private List<Fincas> Auditores;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Auditores() {
    }

    public Auditores(Long id) {
        this.id = id;
    }

    public Auditores(Long id, String usuario, String nombre, String apellido, String foto, Integer ref_auditor, long idToken) {
        this.id = id;
        this.usuario = usuario;
        this.nombre = nombre;
        this.apellido = apellido;
        this.foto = foto;
        this.ref_auditor = ref_auditor;
        this.idToken = idToken;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAuditoresDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUsuario() {
        return usuario;
    }

    public void setUsuario(String usuario) {
        this.usuario = usuario;
    }

    public String getNombre() {
        return nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    public String getApellido() {
        return apellido;
    }

    public void setApellido(String apellido) {
        this.apellido = apellido;
    }

    public String getFoto() {
        return foto;
    }

    public void setFoto(String foto) {
        this.foto = foto;
    }

    public Integer getRef_auditor() {
        return ref_auditor;
    }

    public void setRef_auditor(Integer ref_auditor) {
        this.ref_auditor = ref_auditor;
    }

    public long getIdToken() {
        return idToken;
    }

    public void setIdToken(long idToken) {
        this.idToken = idToken;
    }

    /** To-one relationship, resolved on first access. */
    public TokensBD getTokensBD() {
        long __key = this.idToken;
        if (tokensBD__resolvedKey == null || !tokensBD__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TokensBDDao targetDao = daoSession.getTokensBDDao();
            TokensBD tokensBDNew = targetDao.load(__key);
            synchronized (this) {
                tokensBD = tokensBDNew;
            	tokensBD__resolvedKey = __key;
            }
        }
        return tokensBD;
    }

    public void setTokensBD(TokensBD tokensBD) {
        if (tokensBD == null) {
            throw new DaoException("To-one property 'idToken' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.tokensBD = tokensBD;
            idToken = tokensBD.getId();
            tokensBD__resolvedKey = idToken;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Fincas> getAuditores() {
        if (Auditores == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FincasDao targetDao = daoSession.getFincasDao();
            List<Fincas> AuditoresNew = targetDao._queryAuditores_Auditores(id);
            synchronized (this) {
                if(Auditores == null) {
                    Auditores = AuditoresNew;
                }
            }
        }
        return Auditores;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAuditores() {
        Auditores = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
