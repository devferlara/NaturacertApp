package naturacert.baumsoft.dev.naturacert;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import naturacert.baumsoft.dev.naturacert.p1p2;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table P1P2.
*/
public class p1p2Dao extends AbstractDao<p1p2, Long> {

    public static final String TABLENAME = "P1P2";

    /**
     * Properties of entity p1p2.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Eapcn = new Property(1, Integer.class, "eapcn", false, "EAPCN");
        public final static Property Pgsa = new Property(2, Integer.class, "pgsa", false, "PGSA");
        public final static Property Eap = new Property(3, Integer.class, "eap", false, "EAP");
        public final static Property Alp = new Property(4, Integer.class, "alp", false, "ALP");
        public final static Property Oym = new Property(5, Integer.class, "oym", false, "OYM");
        public final static Property Res = new Property(6, Integer.class, "res", false, "RES");
        public final static Property Reg = new Property(7, Integer.class, "reg", false, "REG");
        public final static Property Map = new Property(8, Integer.class, "map", false, "MAP");
        public final static Property Laip = new Property(9, Integer.class, "laip", false, "LAIP");
        public final static Property Pol = new Property(10, Integer.class, "pol", false, "POL");
        public final static Property Proc = new Property(11, Integer.class, "proc", false, "PROC");
        public final static Property Origen = new Property(12, Integer.class, "origen", false, "ORIGEN");
        public final static Property Obser = new Property(13, String.class, "obser", false, "OBSER");
        public final static Property Id_formulario = new Property(14, Integer.class, "id_formulario", false, "ID_FORMULARIO");
    };


    public p1p2Dao(DaoConfig config) {
        super(config);
    }
    
    public p1p2Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'P1P2' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'EAPCN' INTEGER," + // 1: eapcn
                "'PGSA' INTEGER," + // 2: pgsa
                "'EAP' INTEGER," + // 3: eap
                "'ALP' INTEGER," + // 4: alp
                "'OYM' INTEGER," + // 5: oym
                "'RES' INTEGER," + // 6: res
                "'REG' INTEGER," + // 7: reg
                "'MAP' INTEGER," + // 8: map
                "'LAIP' INTEGER," + // 9: laip
                "'POL' INTEGER," + // 10: pol
                "'PROC' INTEGER," + // 11: proc
                "'ORIGEN' INTEGER," + // 12: origen
                "'OBSER' TEXT," + // 13: obser
                "'ID_FORMULARIO' INTEGER);"); // 14: id_formulario
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'P1P2'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, p1p2 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer eapcn = entity.getEapcn();
        if (eapcn != null) {
            stmt.bindLong(2, eapcn);
        }
 
        Integer pgsa = entity.getPgsa();
        if (pgsa != null) {
            stmt.bindLong(3, pgsa);
        }
 
        Integer eap = entity.getEap();
        if (eap != null) {
            stmt.bindLong(4, eap);
        }
 
        Integer alp = entity.getAlp();
        if (alp != null) {
            stmt.bindLong(5, alp);
        }
 
        Integer oym = entity.getOym();
        if (oym != null) {
            stmt.bindLong(6, oym);
        }
 
        Integer res = entity.getRes();
        if (res != null) {
            stmt.bindLong(7, res);
        }
 
        Integer reg = entity.getReg();
        if (reg != null) {
            stmt.bindLong(8, reg);
        }
 
        Integer map = entity.getMap();
        if (map != null) {
            stmt.bindLong(9, map);
        }
 
        Integer laip = entity.getLaip();
        if (laip != null) {
            stmt.bindLong(10, laip);
        }
 
        Integer pol = entity.getPol();
        if (pol != null) {
            stmt.bindLong(11, pol);
        }
 
        Integer proc = entity.getProc();
        if (proc != null) {
            stmt.bindLong(12, proc);
        }
 
        Integer origen = entity.getOrigen();
        if (origen != null) {
            stmt.bindLong(13, origen);
        }
 
        String obser = entity.getObser();
        if (obser != null) {
            stmt.bindString(14, obser);
        }
 
        Integer id_formulario = entity.getId_formulario();
        if (id_formulario != null) {
            stmt.bindLong(15, id_formulario);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public p1p2 readEntity(Cursor cursor, int offset) {
        p1p2 entity = new p1p2( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // eapcn
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // pgsa
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // eap
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // alp
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // oym
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // res
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // reg
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // map
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // laip
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // pol
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // proc
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // origen
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // obser
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14) // id_formulario
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, p1p2 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEapcn(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setPgsa(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setEap(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setAlp(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setOym(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setRes(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setReg(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setMap(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setLaip(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setPol(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setProc(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setOrigen(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setObser(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setId_formulario(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(p1p2 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(p1p2 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
