package naturacert.baumsoft.dev.naturacert;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import naturacert.baumsoft.dev.naturacert.p6p9;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table P6P9.
*/
public class p6p9Dao extends AbstractDao<p6p9, Long> {

    public static final String TABLENAME = "P6P9";

    /**
     * Properties of entity p6p9.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Lada = new Property(1, Integer.class, "lada", false, "LADA");
        public final static Property Eddl = new Property(2, Integer.class, "eddl", false, "EDDL");
        public final static Property Somi = new Property(3, Integer.class, "somi", false, "SOMI");
        public final static Property Mean = new Property(4, Integer.class, "mean", false, "MEAN");
        public final static Property Kprd = new Property(5, Integer.class, "kprd", false, "KPRD");
        public final static Property Tids = new Property(6, Integer.class, "tids", false, "TIDS");
        public final static Property Peqr = new Property(7, Integer.class, "peqr", false, "PEQR");
        public final static Property Mdpd = new Property(8, Integer.class, "mdpd", false, "MDPD");
        public final static Property Lade = new Property(9, Integer.class, "lade", false, "LADE");
        public final static Property Origen = new Property(10, Integer.class, "origen", false, "ORIGEN");
        public final static Property Obser = new Property(11, String.class, "obser", false, "OBSER");
        public final static Property Id_formulario = new Property(12, Integer.class, "id_formulario", false, "ID_FORMULARIO");
    };


    public p6p9Dao(DaoConfig config) {
        super(config);
    }
    
    public p6p9Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'P6P9' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'LADA' INTEGER," + // 1: lada
                "'EDDL' INTEGER," + // 2: eddl
                "'SOMI' INTEGER," + // 3: somi
                "'MEAN' INTEGER," + // 4: mean
                "'KPRD' INTEGER," + // 5: kprd
                "'TIDS' INTEGER," + // 6: tids
                "'PEQR' INTEGER," + // 7: peqr
                "'MDPD' INTEGER," + // 8: mdpd
                "'LADE' INTEGER," + // 9: lade
                "'ORIGEN' INTEGER," + // 10: origen
                "'OBSER' TEXT," + // 11: obser
                "'ID_FORMULARIO' INTEGER);"); // 12: id_formulario
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'P6P9'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, p6p9 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer lada = entity.getLada();
        if (lada != null) {
            stmt.bindLong(2, lada);
        }
 
        Integer eddl = entity.getEddl();
        if (eddl != null) {
            stmt.bindLong(3, eddl);
        }
 
        Integer somi = entity.getSomi();
        if (somi != null) {
            stmt.bindLong(4, somi);
        }
 
        Integer mean = entity.getMean();
        if (mean != null) {
            stmt.bindLong(5, mean);
        }
 
        Integer kprd = entity.getKprd();
        if (kprd != null) {
            stmt.bindLong(6, kprd);
        }
 
        Integer tids = entity.getTids();
        if (tids != null) {
            stmt.bindLong(7, tids);
        }
 
        Integer peqr = entity.getPeqr();
        if (peqr != null) {
            stmt.bindLong(8, peqr);
        }
 
        Integer mdpd = entity.getMdpd();
        if (mdpd != null) {
            stmt.bindLong(9, mdpd);
        }
 
        Integer lade = entity.getLade();
        if (lade != null) {
            stmt.bindLong(10, lade);
        }
 
        Integer origen = entity.getOrigen();
        if (origen != null) {
            stmt.bindLong(11, origen);
        }
 
        String obser = entity.getObser();
        if (obser != null) {
            stmt.bindString(12, obser);
        }
 
        Integer id_formulario = entity.getId_formulario();
        if (id_formulario != null) {
            stmt.bindLong(13, id_formulario);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public p6p9 readEntity(Cursor cursor, int offset) {
        p6p9 entity = new p6p9( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // lada
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // eddl
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // somi
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // mean
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // kprd
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // tids
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // peqr
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // mdpd
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // lade
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // origen
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // obser
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12) // id_formulario
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, p6p9 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLada(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setEddl(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setSomi(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setMean(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setKprd(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setTids(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setPeqr(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setMdpd(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setLade(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setOrigen(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setObser(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setId_formulario(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(p6p9 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(p6p9 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
