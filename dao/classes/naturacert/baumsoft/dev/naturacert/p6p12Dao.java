package naturacert.baumsoft.dev.naturacert;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import naturacert.baumsoft.dev.naturacert.p6p12;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table P6P12.
*/
public class p6p12Dao extends AbstractDao<p6p12, Long> {

    public static final String TABLENAME = "P6P12";

    /**
     * Properties of entity p6p12.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Lfdt = new Property(1, Integer.class, "lfdt", false, "LFDT");
        public final static Property Stmp = new Property(2, Integer.class, "stmp", false, "STMP");
        public final static Property Lvqt = new Property(3, Integer.class, "lvqt", false, "LVQT");
        public final static Property Ccpd = new Property(4, Integer.class, "ccpd", false, "CCPD");
        public final static Property Lein = new Property(5, Integer.class, "lein", false, "LEIN");
        public final static Property Lped = new Property(6, Integer.class, "lped", false, "LPED");
        public final static Property Last = new Property(7, Integer.class, "last", false, "LAST");
        public final static Property Lemd = new Property(8, Integer.class, "lemd", false, "LEMD");
        public final static Property Origen = new Property(9, Integer.class, "origen", false, "ORIGEN");
        public final static Property Obser = new Property(10, String.class, "obser", false, "OBSER");
        public final static Property Id_formulario = new Property(11, Integer.class, "id_formulario", false, "ID_FORMULARIO");
    };


    public p6p12Dao(DaoConfig config) {
        super(config);
    }
    
    public p6p12Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'P6P12' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'LFDT' INTEGER," + // 1: lfdt
                "'STMP' INTEGER," + // 2: stmp
                "'LVQT' INTEGER," + // 3: lvqt
                "'CCPD' INTEGER," + // 4: ccpd
                "'LEIN' INTEGER," + // 5: lein
                "'LPED' INTEGER," + // 6: lped
                "'LAST' INTEGER," + // 7: last
                "'LEMD' INTEGER," + // 8: lemd
                "'ORIGEN' INTEGER," + // 9: origen
                "'OBSER' TEXT," + // 10: obser
                "'ID_FORMULARIO' INTEGER);"); // 11: id_formulario
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'P6P12'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, p6p12 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer lfdt = entity.getLfdt();
        if (lfdt != null) {
            stmt.bindLong(2, lfdt);
        }
 
        Integer stmp = entity.getStmp();
        if (stmp != null) {
            stmt.bindLong(3, stmp);
        }
 
        Integer lvqt = entity.getLvqt();
        if (lvqt != null) {
            stmt.bindLong(4, lvqt);
        }
 
        Integer ccpd = entity.getCcpd();
        if (ccpd != null) {
            stmt.bindLong(5, ccpd);
        }
 
        Integer lein = entity.getLein();
        if (lein != null) {
            stmt.bindLong(6, lein);
        }
 
        Integer lped = entity.getLped();
        if (lped != null) {
            stmt.bindLong(7, lped);
        }
 
        Integer last = entity.getLast();
        if (last != null) {
            stmt.bindLong(8, last);
        }
 
        Integer lemd = entity.getLemd();
        if (lemd != null) {
            stmt.bindLong(9, lemd);
        }
 
        Integer origen = entity.getOrigen();
        if (origen != null) {
            stmt.bindLong(10, origen);
        }
 
        String obser = entity.getObser();
        if (obser != null) {
            stmt.bindString(11, obser);
        }
 
        Integer id_formulario = entity.getId_formulario();
        if (id_formulario != null) {
            stmt.bindLong(12, id_formulario);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public p6p12 readEntity(Cursor cursor, int offset) {
        p6p12 entity = new p6p12( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // lfdt
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // stmp
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // lvqt
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // ccpd
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // lein
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // lped
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // last
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // lemd
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // origen
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // obser
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11) // id_formulario
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, p6p12 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLfdt(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setStmp(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setLvqt(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setCcpd(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setLein(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setLped(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setLast(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setLemd(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setOrigen(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setObser(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setId_formulario(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(p6p12 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(p6p12 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
