package naturacert.baumsoft.dev.naturacert;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import naturacert.baumsoft.dev.naturacert.p9p4;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table P9P4.
*/
public class p9p4Dao extends AbstractDao<p9p4, Long> {

    public static final String TABLENAME = "P9P4";

    /**
     * Properties of entity p9p4.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Fpad = new Property(1, Integer.class, "fpad", false, "FPAD");
        public final static Property Vegn = new Property(2, Integer.class, "vegn", false, "VEGN");
        public final static Property Vegs = new Property(3, Integer.class, "vegs", false, "VEGS");
        public final static Property Prad = new Property(4, Integer.class, "prad", false, "PRAD");
        public final static Property Tid = new Property(5, Integer.class, "tid", false, "TID");
        public final static Property Mede = new Property(6, Integer.class, "mede", false, "MEDE");
        public final static Property Enc = new Property(7, Integer.class, "enc", false, "ENC");
        public final static Property Map = new Property(8, Integer.class, "map", false, "MAP");
        public final static Property Qprt = new Property(9, Integer.class, "qprt", false, "QPRT");
        public final static Property Origen = new Property(10, Integer.class, "origen", false, "ORIGEN");
        public final static Property Id_formulario = new Property(11, Integer.class, "id_formulario", false, "ID_FORMULARIO");
        public final static Property Observaciones = new Property(12, String.class, "observaciones", false, "OBSERVACIONES");
    };


    public p9p4Dao(DaoConfig config) {
        super(config);
    }
    
    public p9p4Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'P9P4' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'FPAD' INTEGER," + // 1: fpad
                "'VEGN' INTEGER," + // 2: vegn
                "'VEGS' INTEGER," + // 3: vegs
                "'PRAD' INTEGER," + // 4: prad
                "'TID' INTEGER," + // 5: tid
                "'MEDE' INTEGER," + // 6: mede
                "'ENC' INTEGER," + // 7: enc
                "'MAP' INTEGER," + // 8: map
                "'QPRT' INTEGER," + // 9: qprt
                "'ORIGEN' INTEGER," + // 10: origen
                "'ID_FORMULARIO' INTEGER," + // 11: id_formulario
                "'OBSERVACIONES' TEXT);"); // 12: observaciones
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'P9P4'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, p9p4 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer fpad = entity.getFpad();
        if (fpad != null) {
            stmt.bindLong(2, fpad);
        }
 
        Integer vegn = entity.getVegn();
        if (vegn != null) {
            stmt.bindLong(3, vegn);
        }
 
        Integer vegs = entity.getVegs();
        if (vegs != null) {
            stmt.bindLong(4, vegs);
        }
 
        Integer prad = entity.getPrad();
        if (prad != null) {
            stmt.bindLong(5, prad);
        }
 
        Integer tid = entity.getTid();
        if (tid != null) {
            stmt.bindLong(6, tid);
        }
 
        Integer mede = entity.getMede();
        if (mede != null) {
            stmt.bindLong(7, mede);
        }
 
        Integer enc = entity.getEnc();
        if (enc != null) {
            stmt.bindLong(8, enc);
        }
 
        Integer map = entity.getMap();
        if (map != null) {
            stmt.bindLong(9, map);
        }
 
        Integer qprt = entity.getQprt();
        if (qprt != null) {
            stmt.bindLong(10, qprt);
        }
 
        Integer origen = entity.getOrigen();
        if (origen != null) {
            stmt.bindLong(11, origen);
        }
 
        Integer id_formulario = entity.getId_formulario();
        if (id_formulario != null) {
            stmt.bindLong(12, id_formulario);
        }
 
        String observaciones = entity.getObservaciones();
        if (observaciones != null) {
            stmt.bindString(13, observaciones);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public p9p4 readEntity(Cursor cursor, int offset) {
        p9p4 entity = new p9p4( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // fpad
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // vegn
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // vegs
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // prad
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // tid
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // mede
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // enc
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // map
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // qprt
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // origen
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // id_formulario
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // observaciones
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, p9p4 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFpad(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setVegn(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setVegs(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setPrad(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setTid(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setMede(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setEnc(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setMap(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setQprt(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setOrigen(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setId_formulario(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setObservaciones(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(p9p4 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(p9p4 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
