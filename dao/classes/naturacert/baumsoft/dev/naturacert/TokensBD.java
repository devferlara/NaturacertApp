package naturacert.baumsoft.dev.naturacert;

import java.util.List;
import naturacert.baumsoft.dev.naturacert.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table TOKENS_BD.
 */
public class TokensBD {

    private Long id;
    private Long expiresIn;
    private Long expiresAt;
    private String tokenType;
    private String refreshToken;
    private String accessToken;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TokensBDDao myDao;

    private List<Auditores> productos_carrito;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public TokensBD() {
    }

    public TokensBD(Long id) {
        this.id = id;
    }

    public TokensBD(Long id, Long expiresIn, Long expiresAt, String tokenType, String refreshToken, String accessToken) {
        this.id = id;
        this.expiresIn = expiresIn;
        this.expiresAt = expiresAt;
        this.tokenType = tokenType;
        this.refreshToken = refreshToken;
        this.accessToken = accessToken;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTokensBDDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getExpiresIn() {
        return expiresIn;
    }

    public void setExpiresIn(Long expiresIn) {
        this.expiresIn = expiresIn;
    }

    public Long getExpiresAt() {
        return expiresAt;
    }

    public void setExpiresAt(Long expiresAt) {
        this.expiresAt = expiresAt;
    }

    public String getTokenType() {
        return tokenType;
    }

    public void setTokenType(String tokenType) {
        this.tokenType = tokenType;
    }

    public String getRefreshToken() {
        return refreshToken;
    }

    public void setRefreshToken(String refreshToken) {
        this.refreshToken = refreshToken;
    }

    public String getAccessToken() {
        return accessToken;
    }

    public void setAccessToken(String accessToken) {
        this.accessToken = accessToken;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Auditores> getProductos_carrito() {
        if (productos_carrito == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AuditoresDao targetDao = daoSession.getAuditoresDao();
            List<Auditores> productos_carritoNew = targetDao._queryTokensBD_Productos_carrito(id);
            synchronized (this) {
                if(productos_carrito == null) {
                    productos_carrito = productos_carritoNew;
                }
            }
        }
        return productos_carrito;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetProductos_carrito() {
        productos_carrito = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
