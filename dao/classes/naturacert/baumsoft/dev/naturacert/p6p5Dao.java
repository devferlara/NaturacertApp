package naturacert.baumsoft.dev.naturacert;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import naturacert.baumsoft.dev.naturacert.p6p5;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table P6P5.
*/
public class p6p5Dao extends AbstractDao<p6p5, Long> {

    public static final String TABLENAME = "P6P5";

    /**
     * Properties of entity p6p5.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Epqa = new Property(1, Integer.class, "epqa", false, "EPQA");
        public final static Property Epqm = new Property(2, Integer.class, "epqm", false, "EPQM");
        public final static Property Lass = new Property(3, Integer.class, "lass", false, "LASS");
        public final static Property Carb = new Property(4, Integer.class, "carb", false, "CARB");
        public final static Property Orga = new Property(5, Integer.class, "orga", false, "ORGA");
        public final static Property Sere = new Property(6, Integer.class, "sere", false, "SERE");
        public final static Property Selr = new Property(7, Integer.class, "selr", false, "SELR");
        public final static Property Sslr = new Property(8, Integer.class, "sslr", false, "SSLR");
        public final static Property Etta = new Property(9, Integer.class, "etta", false, "ETTA");
        public final static Property Origen = new Property(10, Integer.class, "origen", false, "ORIGEN");
        public final static Property Id_formulario = new Property(11, Integer.class, "id_formulario", false, "ID_FORMULARIO");
        public final static Property Observaciones = new Property(12, String.class, "observaciones", false, "OBSERVACIONES");
    };


    public p6p5Dao(DaoConfig config) {
        super(config);
    }
    
    public p6p5Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'P6P5' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'EPQA' INTEGER," + // 1: epqa
                "'EPQM' INTEGER," + // 2: epqm
                "'LASS' INTEGER," + // 3: lass
                "'CARB' INTEGER," + // 4: carb
                "'ORGA' INTEGER," + // 5: orga
                "'SERE' INTEGER," + // 6: sere
                "'SELR' INTEGER," + // 7: selr
                "'SSLR' INTEGER," + // 8: sslr
                "'ETTA' INTEGER," + // 9: etta
                "'ORIGEN' INTEGER," + // 10: origen
                "'ID_FORMULARIO' INTEGER," + // 11: id_formulario
                "'OBSERVACIONES' TEXT);"); // 12: observaciones
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'P6P5'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, p6p5 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer epqa = entity.getEpqa();
        if (epqa != null) {
            stmt.bindLong(2, epqa);
        }
 
        Integer epqm = entity.getEpqm();
        if (epqm != null) {
            stmt.bindLong(3, epqm);
        }
 
        Integer lass = entity.getLass();
        if (lass != null) {
            stmt.bindLong(4, lass);
        }
 
        Integer carb = entity.getCarb();
        if (carb != null) {
            stmt.bindLong(5, carb);
        }
 
        Integer orga = entity.getOrga();
        if (orga != null) {
            stmt.bindLong(6, orga);
        }
 
        Integer sere = entity.getSere();
        if (sere != null) {
            stmt.bindLong(7, sere);
        }
 
        Integer selr = entity.getSelr();
        if (selr != null) {
            stmt.bindLong(8, selr);
        }
 
        Integer sslr = entity.getSslr();
        if (sslr != null) {
            stmt.bindLong(9, sslr);
        }
 
        Integer etta = entity.getEtta();
        if (etta != null) {
            stmt.bindLong(10, etta);
        }
 
        Integer origen = entity.getOrigen();
        if (origen != null) {
            stmt.bindLong(11, origen);
        }
 
        Integer id_formulario = entity.getId_formulario();
        if (id_formulario != null) {
            stmt.bindLong(12, id_formulario);
        }
 
        String observaciones = entity.getObservaciones();
        if (observaciones != null) {
            stmt.bindString(13, observaciones);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public p6p5 readEntity(Cursor cursor, int offset) {
        p6p5 entity = new p6p5( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // epqa
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // epqm
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // lass
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // carb
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // orga
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // sere
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // selr
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // sslr
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // etta
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // origen
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // id_formulario
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // observaciones
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, p6p5 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEpqa(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setEpqm(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setLass(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setCarb(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setOrga(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setSere(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setSelr(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setSslr(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setEtta(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setOrigen(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setId_formulario(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setObservaciones(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(p6p5 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(p6p5 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
