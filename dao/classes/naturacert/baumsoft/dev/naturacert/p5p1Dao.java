package naturacert.baumsoft.dev.naturacert;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import naturacert.baumsoft.dev.naturacert.p5p1;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table P5P1.
*/
public class p5p1Dao extends AbstractDao<p5p1, Long> {

    public static final String TABLENAME = "P5P1";

    /**
     * Properties of entity p5p1.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Armhf = new Property(1, Integer.class, "armhf", false, "ARMHF");
        public final static Property Polso = new Property(2, Integer.class, "polso", false, "POLSO");
        public final static Property Apad = new Property(3, Integer.class, "apad", false, "APAD");
        public final static Property Psdcf = new Property(4, Integer.class, "psdcf", false, "PSDCF");
        public final static Property Div = new Property(5, Integer.class, "div", false, "DIV");
        public final static Property Cpf = new Property(6, Integer.class, "cpf", false, "CPF");
        public final static Property Dpe = new Property(7, Integer.class, "dpe", false, "DPE");
        public final static Property Comu = new Property(8, Integer.class, "comu", false, "COMU");
        public final static Property Rdtya = new Property(9, Integer.class, "rdtya", false, "RDTYA");
        public final static Property Origen = new Property(10, Integer.class, "origen", false, "ORIGEN");
        public final static Property Obser = new Property(11, String.class, "obser", false, "OBSER");
        public final static Property Id_formulario = new Property(12, Integer.class, "id_formulario", false, "ID_FORMULARIO");
    };


    public p5p1Dao(DaoConfig config) {
        super(config);
    }
    
    public p5p1Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'P5P1' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ARMHF' INTEGER," + // 1: armhf
                "'POLSO' INTEGER," + // 2: polso
                "'APAD' INTEGER," + // 3: apad
                "'PSDCF' INTEGER," + // 4: psdcf
                "'DIV' INTEGER," + // 5: div
                "'CPF' INTEGER," + // 6: cpf
                "'DPE' INTEGER," + // 7: dpe
                "'COMU' INTEGER," + // 8: comu
                "'RDTYA' INTEGER," + // 9: rdtya
                "'ORIGEN' INTEGER," + // 10: origen
                "'OBSER' TEXT," + // 11: obser
                "'ID_FORMULARIO' INTEGER);"); // 12: id_formulario
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'P5P1'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, p5p1 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer armhf = entity.getArmhf();
        if (armhf != null) {
            stmt.bindLong(2, armhf);
        }
 
        Integer polso = entity.getPolso();
        if (polso != null) {
            stmt.bindLong(3, polso);
        }
 
        Integer apad = entity.getApad();
        if (apad != null) {
            stmt.bindLong(4, apad);
        }
 
        Integer psdcf = entity.getPsdcf();
        if (psdcf != null) {
            stmt.bindLong(5, psdcf);
        }
 
        Integer div = entity.getDiv();
        if (div != null) {
            stmt.bindLong(6, div);
        }
 
        Integer cpf = entity.getCpf();
        if (cpf != null) {
            stmt.bindLong(7, cpf);
        }
 
        Integer dpe = entity.getDpe();
        if (dpe != null) {
            stmt.bindLong(8, dpe);
        }
 
        Integer comu = entity.getComu();
        if (comu != null) {
            stmt.bindLong(9, comu);
        }
 
        Integer rdtya = entity.getRdtya();
        if (rdtya != null) {
            stmt.bindLong(10, rdtya);
        }
 
        Integer origen = entity.getOrigen();
        if (origen != null) {
            stmt.bindLong(11, origen);
        }
 
        String obser = entity.getObser();
        if (obser != null) {
            stmt.bindString(12, obser);
        }
 
        Integer id_formulario = entity.getId_formulario();
        if (id_formulario != null) {
            stmt.bindLong(13, id_formulario);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public p5p1 readEntity(Cursor cursor, int offset) {
        p5p1 entity = new p5p1( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // armhf
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // polso
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // apad
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // psdcf
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // div
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // cpf
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // dpe
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // comu
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // rdtya
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // origen
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // obser
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12) // id_formulario
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, p5p1 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setArmhf(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setPolso(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setApad(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setPsdcf(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setDiv(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setCpf(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setDpe(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setComu(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setRdtya(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setOrigen(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setObser(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setId_formulario(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(p5p1 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(p5p1 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
