package naturacert.baumsoft.dev.naturacert;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import naturacert.baumsoft.dev.naturacert.p8p4;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table P8P4.
*/
public class p8p4Dao extends AbstractDao<p8p4, Long> {

    public static final String TABLENAME = "P8P4";

    /**
     * Properties of entity p8p4.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nspe = new Property(1, Integer.class, "nspe", false, "NSPE");
        public final static Property Lfnu = new Property(2, Integer.class, "lfnu", false, "LFNU");
        public final static Property Fnus = new Property(3, Integer.class, "fnus", false, "FNUS");
        public final static Property Uape = new Property(4, Integer.class, "uape", false, "UAPE");
        public final static Property Uspp = new Property(5, Integer.class, "uspp", false, "USPP");
        public final static Property Dlds = new Property(6, Integer.class, "dlds", false, "DLDS");
        public final static Property Uadc = new Property(7, Integer.class, "uadc", false, "UADC");
        public final static Property Sqnp = new Property(8, Integer.class, "sqnp", false, "SQNP");
        public final static Property Nsbu = new Property(9, Integer.class, "nsbu", false, "NSBU");
        public final static Property Origen = new Property(10, Integer.class, "origen", false, "ORIGEN");
        public final static Property Id_formulario = new Property(11, Integer.class, "id_formulario", false, "ID_FORMULARIO");
        public final static Property Observaciones = new Property(12, String.class, "observaciones", false, "OBSERVACIONES");
    };


    public p8p4Dao(DaoConfig config) {
        super(config);
    }
    
    public p8p4Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'P8P4' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NSPE' INTEGER," + // 1: nspe
                "'LFNU' INTEGER," + // 2: lfnu
                "'FNUS' INTEGER," + // 3: fnus
                "'UAPE' INTEGER," + // 4: uape
                "'USPP' INTEGER," + // 5: uspp
                "'DLDS' INTEGER," + // 6: dlds
                "'UADC' INTEGER," + // 7: uadc
                "'SQNP' INTEGER," + // 8: sqnp
                "'NSBU' INTEGER," + // 9: nsbu
                "'ORIGEN' INTEGER," + // 10: origen
                "'ID_FORMULARIO' INTEGER," + // 11: id_formulario
                "'OBSERVACIONES' TEXT);"); // 12: observaciones
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'P8P4'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, p8p4 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer nspe = entity.getNspe();
        if (nspe != null) {
            stmt.bindLong(2, nspe);
        }
 
        Integer lfnu = entity.getLfnu();
        if (lfnu != null) {
            stmt.bindLong(3, lfnu);
        }
 
        Integer fnus = entity.getFnus();
        if (fnus != null) {
            stmt.bindLong(4, fnus);
        }
 
        Integer uape = entity.getUape();
        if (uape != null) {
            stmt.bindLong(5, uape);
        }
 
        Integer uspp = entity.getUspp();
        if (uspp != null) {
            stmt.bindLong(6, uspp);
        }
 
        Integer dlds = entity.getDlds();
        if (dlds != null) {
            stmt.bindLong(7, dlds);
        }
 
        Integer uadc = entity.getUadc();
        if (uadc != null) {
            stmt.bindLong(8, uadc);
        }
 
        Integer sqnp = entity.getSqnp();
        if (sqnp != null) {
            stmt.bindLong(9, sqnp);
        }
 
        Integer nsbu = entity.getNsbu();
        if (nsbu != null) {
            stmt.bindLong(10, nsbu);
        }
 
        Integer origen = entity.getOrigen();
        if (origen != null) {
            stmt.bindLong(11, origen);
        }
 
        Integer id_formulario = entity.getId_formulario();
        if (id_formulario != null) {
            stmt.bindLong(12, id_formulario);
        }
 
        String observaciones = entity.getObservaciones();
        if (observaciones != null) {
            stmt.bindString(13, observaciones);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public p8p4 readEntity(Cursor cursor, int offset) {
        p8p4 entity = new p8p4( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // nspe
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // lfnu
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // fnus
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // uape
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // uspp
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // dlds
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // uadc
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // sqnp
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // nsbu
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // origen
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // id_formulario
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // observaciones
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, p8p4 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNspe(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setLfnu(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setFnus(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setUape(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setUspp(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setDlds(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setUadc(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setSqnp(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setNsbu(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setOrigen(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setId_formulario(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setObservaciones(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(p8p4 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(p8p4 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
