package naturacert.baumsoft.dev.naturacert;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import naturacert.baumsoft.dev.naturacert.p4p1;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table P4P1.
*/
public class p4p1Dao extends AbstractDao<p4p1, Long> {

    public static final String TABLENAME = "P4P1";

    /**
     * Properties of entity p4p1.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Fepca = new Property(1, Integer.class, "fepca", false, "FEPCA");
        public final static Property Pca = new Property(2, Integer.class, "pca", false, "PCA");
        public final static Property Ifs = new Property(3, Integer.class, "ifs", false, "IFS");
        public final static Property Neda = new Property(4, Integer.class, "neda", false, "NEDA");
        public final static Property Map = new Property(5, Integer.class, "map", false, "MAP");
        public final static Property Rca = new Property(6, Integer.class, "rca", false, "RCA");
        public final static Property Fcra = new Property(7, Integer.class, "fcra", false, "FCRA");
        public final static Property Frmr = new Property(8, Integer.class, "frmr", false, "FRMR");
        public final static Property Rcaf = new Property(9, Integer.class, "rcaf", false, "RCAF");
        public final static Property Origen = new Property(10, Integer.class, "origen", false, "ORIGEN");
        public final static Property Id_formulario = new Property(11, Integer.class, "id_formulario", false, "ID_FORMULARIO");
        public final static Property Observaciones = new Property(12, String.class, "observaciones", false, "OBSERVACIONES");
    };


    public p4p1Dao(DaoConfig config) {
        super(config);
    }
    
    public p4p1Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'P4P1' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'FEPCA' INTEGER," + // 1: fepca
                "'PCA' INTEGER," + // 2: pca
                "'IFS' INTEGER," + // 3: ifs
                "'NEDA' INTEGER," + // 4: neda
                "'MAP' INTEGER," + // 5: map
                "'RCA' INTEGER," + // 6: rca
                "'FCRA' INTEGER," + // 7: fcra
                "'FRMR' INTEGER," + // 8: frmr
                "'RCAF' INTEGER," + // 9: rcaf
                "'ORIGEN' INTEGER," + // 10: origen
                "'ID_FORMULARIO' INTEGER," + // 11: id_formulario
                "'OBSERVACIONES' TEXT);"); // 12: observaciones
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'P4P1'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, p4p1 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer fepca = entity.getFepca();
        if (fepca != null) {
            stmt.bindLong(2, fepca);
        }
 
        Integer pca = entity.getPca();
        if (pca != null) {
            stmt.bindLong(3, pca);
        }
 
        Integer ifs = entity.getIfs();
        if (ifs != null) {
            stmt.bindLong(4, ifs);
        }
 
        Integer neda = entity.getNeda();
        if (neda != null) {
            stmt.bindLong(5, neda);
        }
 
        Integer map = entity.getMap();
        if (map != null) {
            stmt.bindLong(6, map);
        }
 
        Integer rca = entity.getRca();
        if (rca != null) {
            stmt.bindLong(7, rca);
        }
 
        Integer fcra = entity.getFcra();
        if (fcra != null) {
            stmt.bindLong(8, fcra);
        }
 
        Integer frmr = entity.getFrmr();
        if (frmr != null) {
            stmt.bindLong(9, frmr);
        }
 
        Integer rcaf = entity.getRcaf();
        if (rcaf != null) {
            stmt.bindLong(10, rcaf);
        }
 
        Integer origen = entity.getOrigen();
        if (origen != null) {
            stmt.bindLong(11, origen);
        }
 
        Integer id_formulario = entity.getId_formulario();
        if (id_formulario != null) {
            stmt.bindLong(12, id_formulario);
        }
 
        String observaciones = entity.getObservaciones();
        if (observaciones != null) {
            stmt.bindString(13, observaciones);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public p4p1 readEntity(Cursor cursor, int offset) {
        p4p1 entity = new p4p1( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // fepca
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // pca
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // ifs
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // neda
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // map
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // rca
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // fcra
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // frmr
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // rcaf
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // origen
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // id_formulario
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // observaciones
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, p4p1 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFepca(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setPca(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setIfs(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setNeda(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setMap(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setRca(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setFcra(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setFrmr(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setRcaf(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setOrigen(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setId_formulario(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setObservaciones(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(p4p1 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(p4p1 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
