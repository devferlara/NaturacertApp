package naturacert.baumsoft.dev.naturacert;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import naturacert.baumsoft.dev.naturacert.p9p5;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table P9P5.
*/
public class p9p5Dao extends AbstractDao<p9p5, Long> {

    public static final String TABLENAME = "P9P5";

    /**
     * Properties of entity p9p5.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nsna = new Property(1, Integer.class, "nsna", false, "NSNA");
        public final static Property Clim = new Property(2, Integer.class, "clim", false, "CLIM");
        public final static Property Top = new Property(3, Integer.class, "top", false, "TOP");
        public final static Property Suel = new Property(4, Integer.class, "suel", false, "SUEL");
        public final static Property Ecyu = new Property(5, Integer.class, "ecyu", false, "ECYU");
        public final static Property Tbn = new Property(6, Integer.class, "tbn", false, "TBN");
        public final static Property Qpna = new Property(7, Integer.class, "qpna", false, "QPNA");
        public final static Property Origen = new Property(8, Integer.class, "origen", false, "ORIGEN");
        public final static Property Id_formulario = new Property(9, Integer.class, "id_formulario", false, "ID_FORMULARIO");
        public final static Property Observaciones = new Property(10, String.class, "observaciones", false, "OBSERVACIONES");
    };


    public p9p5Dao(DaoConfig config) {
        super(config);
    }
    
    public p9p5Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'P9P5' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NSNA' INTEGER," + // 1: nsna
                "'CLIM' INTEGER," + // 2: clim
                "'TOP' INTEGER," + // 3: top
                "'SUEL' INTEGER," + // 4: suel
                "'ECYU' INTEGER," + // 5: ecyu
                "'TBN' INTEGER," + // 6: tbn
                "'QPNA' INTEGER," + // 7: qpna
                "'ORIGEN' INTEGER," + // 8: origen
                "'ID_FORMULARIO' INTEGER," + // 9: id_formulario
                "'OBSERVACIONES' TEXT);"); // 10: observaciones
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'P9P5'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, p9p5 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer nsna = entity.getNsna();
        if (nsna != null) {
            stmt.bindLong(2, nsna);
        }
 
        Integer clim = entity.getClim();
        if (clim != null) {
            stmt.bindLong(3, clim);
        }
 
        Integer top = entity.getTop();
        if (top != null) {
            stmt.bindLong(4, top);
        }
 
        Integer suel = entity.getSuel();
        if (suel != null) {
            stmt.bindLong(5, suel);
        }
 
        Integer ecyu = entity.getEcyu();
        if (ecyu != null) {
            stmt.bindLong(6, ecyu);
        }
 
        Integer tbn = entity.getTbn();
        if (tbn != null) {
            stmt.bindLong(7, tbn);
        }
 
        Integer qpna = entity.getQpna();
        if (qpna != null) {
            stmt.bindLong(8, qpna);
        }
 
        Integer origen = entity.getOrigen();
        if (origen != null) {
            stmt.bindLong(9, origen);
        }
 
        Integer id_formulario = entity.getId_formulario();
        if (id_formulario != null) {
            stmt.bindLong(10, id_formulario);
        }
 
        String observaciones = entity.getObservaciones();
        if (observaciones != null) {
            stmt.bindString(11, observaciones);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public p9p5 readEntity(Cursor cursor, int offset) {
        p9p5 entity = new p9p5( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // nsna
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // clim
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // top
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // suel
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // ecyu
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // tbn
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // qpna
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // origen
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // id_formulario
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // observaciones
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, p9p5 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNsna(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setClim(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setTop(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setSuel(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setEcyu(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setTbn(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setQpna(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setOrigen(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setId_formulario(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setObservaciones(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(p9p5 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(p9p5 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
