package naturacert.baumsoft.dev.naturacert;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import naturacert.baumsoft.dev.naturacert.p2p9;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table P2P9.
*/
public class p2p9Dao extends AbstractDao<p2p9, Long> {

    public static final String TABLENAME = "P2P9";

    /**
     * Properties of entity p2p9.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Flipc = new Property(1, Integer.class, "flipc", false, "FLIPC");
        public final static Property Cpmr = new Property(2, Integer.class, "cpmr", false, "CPMR");
        public final static Property Encd = new Property(3, Integer.class, "encd", false, "ENCD");
        public final static Property Adp = new Property(4, Integer.class, "adp", false, "ADP");
        public final static Property Sbv = new Property(5, Integer.class, "sbv", false, "SBV");
        public final static Property Adc = new Property(6, Integer.class, "adc", false, "ADC");
        public final static Property Pex = new Property(7, Integer.class, "pex", false, "PEX");
        public final static Property Origen = new Property(8, Integer.class, "origen", false, "ORIGEN");
        public final static Property Id_formulario = new Property(9, Integer.class, "id_formulario", false, "ID_FORMULARIO");
        public final static Property Observaciones = new Property(10, String.class, "observaciones", false, "OBSERVACIONES");
    };


    public p2p9Dao(DaoConfig config) {
        super(config);
    }
    
    public p2p9Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'P2P9' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'FLIPC' INTEGER," + // 1: flipc
                "'CPMR' INTEGER," + // 2: cpmr
                "'ENCD' INTEGER," + // 3: encd
                "'ADP' INTEGER," + // 4: adp
                "'SBV' INTEGER," + // 5: sbv
                "'ADC' INTEGER," + // 6: adc
                "'PEX' INTEGER," + // 7: pex
                "'ORIGEN' INTEGER," + // 8: origen
                "'ID_FORMULARIO' INTEGER," + // 9: id_formulario
                "'OBSERVACIONES' TEXT);"); // 10: observaciones
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'P2P9'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, p2p9 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer flipc = entity.getFlipc();
        if (flipc != null) {
            stmt.bindLong(2, flipc);
        }
 
        Integer cpmr = entity.getCpmr();
        if (cpmr != null) {
            stmt.bindLong(3, cpmr);
        }
 
        Integer encd = entity.getEncd();
        if (encd != null) {
            stmt.bindLong(4, encd);
        }
 
        Integer adp = entity.getAdp();
        if (adp != null) {
            stmt.bindLong(5, adp);
        }
 
        Integer sbv = entity.getSbv();
        if (sbv != null) {
            stmt.bindLong(6, sbv);
        }
 
        Integer adc = entity.getAdc();
        if (adc != null) {
            stmt.bindLong(7, adc);
        }
 
        Integer pex = entity.getPex();
        if (pex != null) {
            stmt.bindLong(8, pex);
        }
 
        Integer origen = entity.getOrigen();
        if (origen != null) {
            stmt.bindLong(9, origen);
        }
 
        Integer id_formulario = entity.getId_formulario();
        if (id_formulario != null) {
            stmt.bindLong(10, id_formulario);
        }
 
        String observaciones = entity.getObservaciones();
        if (observaciones != null) {
            stmt.bindString(11, observaciones);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public p2p9 readEntity(Cursor cursor, int offset) {
        p2p9 entity = new p2p9( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // flipc
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // cpmr
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // encd
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // adp
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // sbv
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // adc
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // pex
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // origen
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // id_formulario
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // observaciones
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, p2p9 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFlipc(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setCpmr(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setEncd(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setAdp(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setSbv(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setAdc(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setPex(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setOrigen(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setId_formulario(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setObservaciones(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(p2p9 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(p2p9 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
