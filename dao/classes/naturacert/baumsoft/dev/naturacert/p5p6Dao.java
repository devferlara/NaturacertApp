package naturacert.baumsoft.dev.naturacert;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import naturacert.baumsoft.dev.naturacert.p5p6;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table P5P6.
*/
public class p5p6Dao extends AbstractDao<p5p6, Long> {

    public static final String TABLENAME = "P5P6";

    /**
     * Properties of entity p5p6.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Htoc = new Property(1, Integer.class, "htoc", false, "HTOC");
        public final static Property Hort = new Property(2, String.class, "hort", false, "HORT");
        public final static Property Dtps = new Property(3, String.class, "dtps", false, "DTPS");
        public final static Property Tdvp = new Property(4, String.class, "tdvp", false, "TDVP");
        public final static Property Mhne = new Property(5, Integer.class, "mhne", false, "MHNE");
        public final static Property Tdsd = new Property(6, Integer.class, "tdsd", false, "TDSD");
        public final static Property Dbic = new Property(7, Integer.class, "dbic", false, "DBIC");
        public final static Property Vac = new Property(8, Integer.class, "vac", false, "VAC");
        public final static Property Dybc = new Property(9, Integer.class, "dybc", false, "DYBC");
        public final static Property Origen = new Property(10, Integer.class, "origen", false, "ORIGEN");
        public final static Property Obser = new Property(11, String.class, "obser", false, "OBSER");
        public final static Property Id_formulario = new Property(12, Integer.class, "id_formulario", false, "ID_FORMULARIO");
    };


    public p5p6Dao(DaoConfig config) {
        super(config);
    }
    
    public p5p6Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'P5P6' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'HTOC' INTEGER," + // 1: htoc
                "'HORT' TEXT," + // 2: hort
                "'DTPS' TEXT," + // 3: dtps
                "'TDVP' TEXT," + // 4: tdvp
                "'MHNE' INTEGER," + // 5: mhne
                "'TDSD' INTEGER," + // 6: tdsd
                "'DBIC' INTEGER," + // 7: dbic
                "'VAC' INTEGER," + // 8: vac
                "'DYBC' INTEGER," + // 9: dybc
                "'ORIGEN' INTEGER," + // 10: origen
                "'OBSER' TEXT," + // 11: obser
                "'ID_FORMULARIO' INTEGER);"); // 12: id_formulario
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'P5P6'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, p5p6 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer htoc = entity.getHtoc();
        if (htoc != null) {
            stmt.bindLong(2, htoc);
        }
 
        String hort = entity.getHort();
        if (hort != null) {
            stmt.bindString(3, hort);
        }
 
        String dtps = entity.getDtps();
        if (dtps != null) {
            stmt.bindString(4, dtps);
        }
 
        String tdvp = entity.getTdvp();
        if (tdvp != null) {
            stmt.bindString(5, tdvp);
        }
 
        Integer mhne = entity.getMhne();
        if (mhne != null) {
            stmt.bindLong(6, mhne);
        }
 
        Integer tdsd = entity.getTdsd();
        if (tdsd != null) {
            stmt.bindLong(7, tdsd);
        }
 
        Integer dbic = entity.getDbic();
        if (dbic != null) {
            stmt.bindLong(8, dbic);
        }
 
        Integer vac = entity.getVac();
        if (vac != null) {
            stmt.bindLong(9, vac);
        }
 
        Integer dybc = entity.getDybc();
        if (dybc != null) {
            stmt.bindLong(10, dybc);
        }
 
        Integer origen = entity.getOrigen();
        if (origen != null) {
            stmt.bindLong(11, origen);
        }
 
        String obser = entity.getObser();
        if (obser != null) {
            stmt.bindString(12, obser);
        }
 
        Integer id_formulario = entity.getId_formulario();
        if (id_formulario != null) {
            stmt.bindLong(13, id_formulario);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public p5p6 readEntity(Cursor cursor, int offset) {
        p5p6 entity = new p5p6( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // htoc
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // hort
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // dtps
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tdvp
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // mhne
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // tdsd
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // dbic
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // vac
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // dybc
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // origen
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // obser
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12) // id_formulario
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, p5p6 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHtoc(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setHort(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDtps(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTdvp(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMhne(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setTdsd(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setDbic(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setVac(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setDybc(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setOrigen(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setObser(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setId_formulario(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(p5p6 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(p5p6 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
