package naturacert.baumsoft.dev.naturacert;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import naturacert.baumsoft.dev.naturacert.p8p1;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table P8P1.
*/
public class p8p1Dao extends AbstractDao<p8p1, Long> {

    public static final String TABLENAME = "P8P1";

    /**
     * Properties of entity p8p1.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Lfde = new Property(1, Integer.class, "lfde", false, "LFDE");
        public final static Property Lfeu = new Property(2, Integer.class, "lfeu", false, "LFEU");
        public final static Property Epia = new Property(3, Integer.class, "epia", false, "EPIA");
        public final static Property Pcem = new Property(4, Integer.class, "pcem", false, "PCEM");
        public final static Property Pcei = new Property(5, Integer.class, "pcei", false, "PCEI");
        public final static Property Reid = new Property(6, Integer.class, "reid", false, "REID");
        public final static Property Feas = new Property(7, Integer.class, "feas", false, "FEAS");
        public final static Property Dura = new Property(8, Integer.class, "dura", false, "DURA");
        public final static Property Exte = new Property(9, Integer.class, "exte", false, "EXTE");
        public final static Property Dano = new Property(10, Integer.class, "dano", false, "DANO");
        public final static Property Udli = new Property(11, Integer.class, "udli", false, "UDLI");
        public final static Property Cedl = new Property(12, Integer.class, "cedl", false, "CEDL");
        public final static Property Tipl = new Property(13, Integer.class, "tipl", false, "TIPL");
        public final static Property Coes = new Property(14, Integer.class, "coes", false, "COES");
        public final static Property Faam = new Property(15, Integer.class, "faam", false, "FAAM");
        public final static Property Mdce = new Property(16, Integer.class, "mdce", false, "MDCE");
        public final static Property Origen = new Property(17, Integer.class, "origen", false, "ORIGEN");
        public final static Property Id_formulario = new Property(18, Integer.class, "id_formulario", false, "ID_FORMULARIO");
        public final static Property Observaciones = new Property(19, String.class, "observaciones", false, "OBSERVACIONES");
    };


    public p8p1Dao(DaoConfig config) {
        super(config);
    }
    
    public p8p1Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'P8P1' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'LFDE' INTEGER," + // 1: lfde
                "'LFEU' INTEGER," + // 2: lfeu
                "'EPIA' INTEGER," + // 3: epia
                "'PCEM' INTEGER," + // 4: pcem
                "'PCEI' INTEGER," + // 5: pcei
                "'REID' INTEGER," + // 6: reid
                "'FEAS' INTEGER," + // 7: feas
                "'DURA' INTEGER," + // 8: dura
                "'EXTE' INTEGER," + // 9: exte
                "'DANO' INTEGER," + // 10: dano
                "'UDLI' INTEGER," + // 11: udli
                "'CEDL' INTEGER," + // 12: cedl
                "'TIPL' INTEGER," + // 13: tipl
                "'COES' INTEGER," + // 14: coes
                "'FAAM' INTEGER," + // 15: faam
                "'MDCE' INTEGER," + // 16: mdce
                "'ORIGEN' INTEGER," + // 17: origen
                "'ID_FORMULARIO' INTEGER," + // 18: id_formulario
                "'OBSERVACIONES' TEXT);"); // 19: observaciones
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'P8P1'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, p8p1 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer lfde = entity.getLfde();
        if (lfde != null) {
            stmt.bindLong(2, lfde);
        }
 
        Integer lfeu = entity.getLfeu();
        if (lfeu != null) {
            stmt.bindLong(3, lfeu);
        }
 
        Integer epia = entity.getEpia();
        if (epia != null) {
            stmt.bindLong(4, epia);
        }
 
        Integer pcem = entity.getPcem();
        if (pcem != null) {
            stmt.bindLong(5, pcem);
        }
 
        Integer pcei = entity.getPcei();
        if (pcei != null) {
            stmt.bindLong(6, pcei);
        }
 
        Integer reid = entity.getReid();
        if (reid != null) {
            stmt.bindLong(7, reid);
        }
 
        Integer feas = entity.getFeas();
        if (feas != null) {
            stmt.bindLong(8, feas);
        }
 
        Integer dura = entity.getDura();
        if (dura != null) {
            stmt.bindLong(9, dura);
        }
 
        Integer exte = entity.getExte();
        if (exte != null) {
            stmt.bindLong(10, exte);
        }
 
        Integer dano = entity.getDano();
        if (dano != null) {
            stmt.bindLong(11, dano);
        }
 
        Integer udli = entity.getUdli();
        if (udli != null) {
            stmt.bindLong(12, udli);
        }
 
        Integer cedl = entity.getCedl();
        if (cedl != null) {
            stmt.bindLong(13, cedl);
        }
 
        Integer tipl = entity.getTipl();
        if (tipl != null) {
            stmt.bindLong(14, tipl);
        }
 
        Integer coes = entity.getCoes();
        if (coes != null) {
            stmt.bindLong(15, coes);
        }
 
        Integer faam = entity.getFaam();
        if (faam != null) {
            stmt.bindLong(16, faam);
        }
 
        Integer mdce = entity.getMdce();
        if (mdce != null) {
            stmt.bindLong(17, mdce);
        }
 
        Integer origen = entity.getOrigen();
        if (origen != null) {
            stmt.bindLong(18, origen);
        }
 
        Integer id_formulario = entity.getId_formulario();
        if (id_formulario != null) {
            stmt.bindLong(19, id_formulario);
        }
 
        String observaciones = entity.getObservaciones();
        if (observaciones != null) {
            stmt.bindString(20, observaciones);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public p8p1 readEntity(Cursor cursor, int offset) {
        p8p1 entity = new p8p1( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // lfde
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // lfeu
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // epia
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // pcem
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // pcei
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // reid
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // feas
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // dura
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // exte
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // dano
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // udli
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // cedl
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // tipl
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // coes
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // faam
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // mdce
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // origen
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // id_formulario
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // observaciones
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, p8p1 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLfde(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setLfeu(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setEpia(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setPcem(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setPcei(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setReid(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setFeas(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setDura(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setExte(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setDano(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setUdli(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setCedl(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setTipl(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setCoes(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setFaam(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setMdce(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setOrigen(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setId_formulario(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setObservaciones(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(p8p1 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(p8p1 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
