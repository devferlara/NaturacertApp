package naturacert.baumsoft.dev.naturacert;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import naturacert.baumsoft.dev.naturacert.p6p4;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table P6P4.
*/
public class p6p4Dao extends AbstractDao<p6p4, Long> {

    public static final String TABLENAME = "P6P4";

    /**
     * Properties of entity p6p4.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Ltqr = new Property(1, Integer.class, "ltqr", false, "LTQR");
        public final static Property Exme = new Property(2, Integer.class, "exme", false, "EXME");
        public final static Property Anua = new Property(3, Integer.class, "anua", false, "ANUA");
        public final static Property Fech = new Property(4, String.class, "fech", false, "FECH");
        public final static Property Srad = new Property(5, Integer.class, "srad", false, "SRAD");
        public final static Property Ltta = new Property(6, Integer.class, "ltta", false, "LTTA");
        public final static Property Hipe = new Property(7, String.class, "hipe", false, "HIPE");
        public final static Property Siap = new Property(8, Integer.class, "siap", false, "SIAP");
        public final static Property Sgta = new Property(9, Integer.class, "sgta", false, "SGTA");
        public final static Property Origen = new Property(10, Integer.class, "origen", false, "ORIGEN");
        public final static Property Obser = new Property(11, String.class, "obser", false, "OBSER");
        public final static Property Id_formulario = new Property(12, Integer.class, "id_formulario", false, "ID_FORMULARIO");
    };


    public p6p4Dao(DaoConfig config) {
        super(config);
    }
    
    public p6p4Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'P6P4' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'LTQR' INTEGER," + // 1: ltqr
                "'EXME' INTEGER," + // 2: exme
                "'ANUA' INTEGER," + // 3: anua
                "'FECH' TEXT," + // 4: fech
                "'SRAD' INTEGER," + // 5: srad
                "'LTTA' INTEGER," + // 6: ltta
                "'HIPE' TEXT," + // 7: hipe
                "'SIAP' INTEGER," + // 8: siap
                "'SGTA' INTEGER," + // 9: sgta
                "'ORIGEN' INTEGER," + // 10: origen
                "'OBSER' TEXT," + // 11: obser
                "'ID_FORMULARIO' INTEGER);"); // 12: id_formulario
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'P6P4'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, p6p4 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer ltqr = entity.getLtqr();
        if (ltqr != null) {
            stmt.bindLong(2, ltqr);
        }
 
        Integer exme = entity.getExme();
        if (exme != null) {
            stmt.bindLong(3, exme);
        }
 
        Integer anua = entity.getAnua();
        if (anua != null) {
            stmt.bindLong(4, anua);
        }
 
        String fech = entity.getFech();
        if (fech != null) {
            stmt.bindString(5, fech);
        }
 
        Integer srad = entity.getSrad();
        if (srad != null) {
            stmt.bindLong(6, srad);
        }
 
        Integer ltta = entity.getLtta();
        if (ltta != null) {
            stmt.bindLong(7, ltta);
        }
 
        String hipe = entity.getHipe();
        if (hipe != null) {
            stmt.bindString(8, hipe);
        }
 
        Integer siap = entity.getSiap();
        if (siap != null) {
            stmt.bindLong(9, siap);
        }
 
        Integer sgta = entity.getSgta();
        if (sgta != null) {
            stmt.bindLong(10, sgta);
        }
 
        Integer origen = entity.getOrigen();
        if (origen != null) {
            stmt.bindLong(11, origen);
        }
 
        String obser = entity.getObser();
        if (obser != null) {
            stmt.bindString(12, obser);
        }
 
        Integer id_formulario = entity.getId_formulario();
        if (id_formulario != null) {
            stmt.bindLong(13, id_formulario);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public p6p4 readEntity(Cursor cursor, int offset) {
        p6p4 entity = new p6p4( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // ltqr
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // exme
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // anua
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fech
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // srad
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // ltta
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // hipe
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // siap
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // sgta
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // origen
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // obser
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12) // id_formulario
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, p6p4 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLtqr(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setExme(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setAnua(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setFech(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSrad(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setLtta(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setHipe(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSiap(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setSgta(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setOrigen(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setObser(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setId_formulario(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(p6p4 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(p6p4 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
