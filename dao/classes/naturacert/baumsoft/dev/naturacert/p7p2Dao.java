package naturacert.baumsoft.dev.naturacert;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import naturacert.baumsoft.dev.naturacert.p7p2;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table P7P2.
*/
public class p7p2Dao extends AbstractDao<p7p2, Long> {

    public static final String TABLENAME = "P7P2";

    /**
     * Properties of entity p7p2.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Ladf = new Property(1, Integer.class, "ladf", false, "LADF");
        public final static Property Expo = new Property(2, Integer.class, "expo", false, "EXPO");
        public final static Property Expr = new Property(3, Integer.class, "expr", false, "EXPR");
        public final static Property Sdlq = new Property(4, Integer.class, "sdlq", false, "SDLQ");
        public final static Property Salp = new Property(5, Integer.class, "salp", false, "SALP");
        public final static Property Shpa = new Property(6, Integer.class, "shpa", false, "SHPA");
        public final static Property Sipy = new Property(7, Integer.class, "sipy", false, "SIPY");
        public final static Property Origen = new Property(8, Integer.class, "origen", false, "ORIGEN");
        public final static Property Obser = new Property(9, String.class, "obser", false, "OBSER");
        public final static Property Id_formulario = new Property(10, Integer.class, "id_formulario", false, "ID_FORMULARIO");
    };


    public p7p2Dao(DaoConfig config) {
        super(config);
    }
    
    public p7p2Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'P7P2' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'LADF' INTEGER," + // 1: ladf
                "'EXPO' INTEGER," + // 2: expo
                "'EXPR' INTEGER," + // 3: expr
                "'SDLQ' INTEGER," + // 4: sdlq
                "'SALP' INTEGER," + // 5: salp
                "'SHPA' INTEGER," + // 6: shpa
                "'SIPY' INTEGER," + // 7: sipy
                "'ORIGEN' INTEGER," + // 8: origen
                "'OBSER' TEXT," + // 9: obser
                "'ID_FORMULARIO' INTEGER);"); // 10: id_formulario
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'P7P2'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, p7p2 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer ladf = entity.getLadf();
        if (ladf != null) {
            stmt.bindLong(2, ladf);
        }
 
        Integer expo = entity.getExpo();
        if (expo != null) {
            stmt.bindLong(3, expo);
        }
 
        Integer expr = entity.getExpr();
        if (expr != null) {
            stmt.bindLong(4, expr);
        }
 
        Integer sdlq = entity.getSdlq();
        if (sdlq != null) {
            stmt.bindLong(5, sdlq);
        }
 
        Integer salp = entity.getSalp();
        if (salp != null) {
            stmt.bindLong(6, salp);
        }
 
        Integer shpa = entity.getShpa();
        if (shpa != null) {
            stmt.bindLong(7, shpa);
        }
 
        Integer sipy = entity.getSipy();
        if (sipy != null) {
            stmt.bindLong(8, sipy);
        }
 
        Integer origen = entity.getOrigen();
        if (origen != null) {
            stmt.bindLong(9, origen);
        }
 
        String obser = entity.getObser();
        if (obser != null) {
            stmt.bindString(10, obser);
        }
 
        Integer id_formulario = entity.getId_formulario();
        if (id_formulario != null) {
            stmt.bindLong(11, id_formulario);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public p7p2 readEntity(Cursor cursor, int offset) {
        p7p2 entity = new p7p2( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // ladf
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // expo
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // expr
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // sdlq
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // salp
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // shpa
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // sipy
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // origen
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // obser
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10) // id_formulario
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, p7p2 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLadf(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setExpo(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setExpr(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setSdlq(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setSalp(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setShpa(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setSipy(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setOrigen(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setObser(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setId_formulario(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(p7p2 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(p7p2 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
