package naturacert.baumsoft.dev.naturacert;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import naturacert.baumsoft.dev.naturacert.p1p9;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table P1P9.
*/
public class p1p9Dao extends AbstractDao<p1p9, Long> {

    public static final String TABLENAME = "P1P9";

    /**
     * Properties of entity p1p9.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Pcsg = new Property(1, Integer.class, "pcsg", false, "PCSG");
        public final static Property Pdc = new Property(2, Integer.class, "pdc", false, "PDC");
        public final static Property Pde = new Property(3, Integer.class, "pde", false, "PDE");
        public final static Property Rda = new Property(4, Integer.class, "rda", false, "RDA");
        public final static Property Rdt = new Property(5, Integer.class, "rdt", false, "RDT");
        public final static Property Rdi = new Property(6, Integer.class, "rdi", false, "RDI");
        public final static Property Actr = new Property(7, Integer.class, "actr", false, "ACTR");
        public final static Property Norm = new Property(8, Integer.class, "norm", false, "NORM");
        public final static Property Pdt = new Property(9, Integer.class, "pdt", false, "PDT");
        public final static Property Tdl = new Property(10, Integer.class, "tdl", false, "TDL");
        public final static Property Origen = new Property(11, Integer.class, "origen", false, "ORIGEN");
        public final static Property Id_formulario = new Property(12, Integer.class, "id_formulario", false, "ID_FORMULARIO");
        public final static Property Observaciones = new Property(13, String.class, "observaciones", false, "OBSERVACIONES");
    };


    public p1p9Dao(DaoConfig config) {
        super(config);
    }
    
    public p1p9Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'P1P9' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'PCSG' INTEGER," + // 1: pcsg
                "'PDC' INTEGER," + // 2: pdc
                "'PDE' INTEGER," + // 3: pde
                "'RDA' INTEGER," + // 4: rda
                "'RDT' INTEGER," + // 5: rdt
                "'RDI' INTEGER," + // 6: rdi
                "'ACTR' INTEGER," + // 7: actr
                "'NORM' INTEGER," + // 8: norm
                "'PDT' INTEGER," + // 9: pdt
                "'TDL' INTEGER," + // 10: tdl
                "'ORIGEN' INTEGER," + // 11: origen
                "'ID_FORMULARIO' INTEGER," + // 12: id_formulario
                "'OBSERVACIONES' TEXT);"); // 13: observaciones
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'P1P9'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, p1p9 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer pcsg = entity.getPcsg();
        if (pcsg != null) {
            stmt.bindLong(2, pcsg);
        }
 
        Integer pdc = entity.getPdc();
        if (pdc != null) {
            stmt.bindLong(3, pdc);
        }
 
        Integer pde = entity.getPde();
        if (pde != null) {
            stmt.bindLong(4, pde);
        }
 
        Integer rda = entity.getRda();
        if (rda != null) {
            stmt.bindLong(5, rda);
        }
 
        Integer rdt = entity.getRdt();
        if (rdt != null) {
            stmt.bindLong(6, rdt);
        }
 
        Integer rdi = entity.getRdi();
        if (rdi != null) {
            stmt.bindLong(7, rdi);
        }
 
        Integer actr = entity.getActr();
        if (actr != null) {
            stmt.bindLong(8, actr);
        }
 
        Integer norm = entity.getNorm();
        if (norm != null) {
            stmt.bindLong(9, norm);
        }
 
        Integer pdt = entity.getPdt();
        if (pdt != null) {
            stmt.bindLong(10, pdt);
        }
 
        Integer tdl = entity.getTdl();
        if (tdl != null) {
            stmt.bindLong(11, tdl);
        }
 
        Integer origen = entity.getOrigen();
        if (origen != null) {
            stmt.bindLong(12, origen);
        }
 
        Integer id_formulario = entity.getId_formulario();
        if (id_formulario != null) {
            stmt.bindLong(13, id_formulario);
        }
 
        String observaciones = entity.getObservaciones();
        if (observaciones != null) {
            stmt.bindString(14, observaciones);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public p1p9 readEntity(Cursor cursor, int offset) {
        p1p9 entity = new p1p9( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // pcsg
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // pdc
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // pde
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // rda
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // rdt
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // rdi
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // actr
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // norm
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // pdt
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // tdl
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // origen
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // id_formulario
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // observaciones
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, p1p9 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPcsg(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setPdc(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setPde(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setRda(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setRdt(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setRdi(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setActr(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setNorm(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setPdt(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setTdl(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setOrigen(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setId_formulario(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setObservaciones(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(p1p9 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(p1p9 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
