package naturacert.baumsoft.dev.naturacert;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import naturacert.baumsoft.dev.naturacert.p1p7;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table P1P7.
*/
public class p1p7Dao extends AbstractDao<p1p7, Long> {

    public static final String TABLENAME = "P1P7";

    /**
     * Properties of entity p1p7.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Cppr = new Property(1, Integer.class, "cppr", false, "CPPR");
        public final static Property Rdr = new Property(2, Integer.class, "rdr", false, "RDR");
        public final static Property Iap = new Property(3, Integer.class, "iap", false, "IAP");
        public final static Property Pmc = new Property(4, Integer.class, "pmc", false, "PMC");
        public final static Property Seg = new Property(5, Integer.class, "seg", false, "SEG");
        public final static Property Med = new Property(6, Integer.class, "med", false, "MED");
        public final static Property Ana = new Property(7, Integer.class, "ana", false, "ANA");
        public final static Property Trab = new Property(8, Integer.class, "trab", false, "TRAB");
        public final static Property Grup = new Property(9, Integer.class, "grup", false, "GRUP");
        public final static Property Oper = new Property(10, Integer.class, "oper", false, "OPER");
        public final static Property Aco = new Property(11, Integer.class, "aco", false, "ACO");
        public final static Property Mdea = new Property(12, Integer.class, "mdea", false, "MDEA");
        public final static Property Mdam = new Property(13, Integer.class, "mdam", false, "MDAM");
        public final static Property Apam = new Property(14, Integer.class, "apam", false, "APAM");
        public final static Property Origen = new Property(15, Integer.class, "origen", false, "ORIGEN");
        public final static Property Obser = new Property(16, String.class, "obser", false, "OBSER");
        public final static Property Id_formulario = new Property(17, Integer.class, "id_formulario", false, "ID_FORMULARIO");
    };


    public p1p7Dao(DaoConfig config) {
        super(config);
    }
    
    public p1p7Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'P1P7' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CPPR' INTEGER," + // 1: cppr
                "'RDR' INTEGER," + // 2: rdr
                "'IAP' INTEGER," + // 3: iap
                "'PMC' INTEGER," + // 4: pmc
                "'SEG' INTEGER," + // 5: seg
                "'MED' INTEGER," + // 6: med
                "'ANA' INTEGER," + // 7: ana
                "'TRAB' INTEGER," + // 8: trab
                "'GRUP' INTEGER," + // 9: grup
                "'OPER' INTEGER," + // 10: oper
                "'ACO' INTEGER," + // 11: aco
                "'MDEA' INTEGER," + // 12: mdea
                "'MDAM' INTEGER," + // 13: mdam
                "'APAM' INTEGER," + // 14: apam
                "'ORIGEN' INTEGER," + // 15: origen
                "'OBSER' TEXT," + // 16: obser
                "'ID_FORMULARIO' INTEGER);"); // 17: id_formulario
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'P1P7'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, p1p7 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer cppr = entity.getCppr();
        if (cppr != null) {
            stmt.bindLong(2, cppr);
        }
 
        Integer rdr = entity.getRdr();
        if (rdr != null) {
            stmt.bindLong(3, rdr);
        }
 
        Integer iap = entity.getIap();
        if (iap != null) {
            stmt.bindLong(4, iap);
        }
 
        Integer pmc = entity.getPmc();
        if (pmc != null) {
            stmt.bindLong(5, pmc);
        }
 
        Integer seg = entity.getSeg();
        if (seg != null) {
            stmt.bindLong(6, seg);
        }
 
        Integer med = entity.getMed();
        if (med != null) {
            stmt.bindLong(7, med);
        }
 
        Integer ana = entity.getAna();
        if (ana != null) {
            stmt.bindLong(8, ana);
        }
 
        Integer trab = entity.getTrab();
        if (trab != null) {
            stmt.bindLong(9, trab);
        }
 
        Integer grup = entity.getGrup();
        if (grup != null) {
            stmt.bindLong(10, grup);
        }
 
        Integer oper = entity.getOper();
        if (oper != null) {
            stmt.bindLong(11, oper);
        }
 
        Integer aco = entity.getAco();
        if (aco != null) {
            stmt.bindLong(12, aco);
        }
 
        Integer mdea = entity.getMdea();
        if (mdea != null) {
            stmt.bindLong(13, mdea);
        }
 
        Integer mdam = entity.getMdam();
        if (mdam != null) {
            stmt.bindLong(14, mdam);
        }
 
        Integer apam = entity.getApam();
        if (apam != null) {
            stmt.bindLong(15, apam);
        }
 
        Integer origen = entity.getOrigen();
        if (origen != null) {
            stmt.bindLong(16, origen);
        }
 
        String obser = entity.getObser();
        if (obser != null) {
            stmt.bindString(17, obser);
        }
 
        Integer id_formulario = entity.getId_formulario();
        if (id_formulario != null) {
            stmt.bindLong(18, id_formulario);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public p1p7 readEntity(Cursor cursor, int offset) {
        p1p7 entity = new p1p7( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // cppr
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // rdr
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // iap
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // pmc
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // seg
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // med
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // ana
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // trab
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // grup
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // oper
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // aco
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // mdea
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // mdam
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // apam
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // origen
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // obser
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17) // id_formulario
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, p1p7 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCppr(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setRdr(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setIap(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setPmc(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setSeg(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setMed(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setAna(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setTrab(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setGrup(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setOper(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setAco(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setMdea(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setMdam(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setApam(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setOrigen(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setObser(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setId_formulario(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(p1p7 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(p1p7 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
