package naturacert.baumsoft.dev.naturacert;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import naturacert.baumsoft.dev.naturacert.p5p14;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table P5P14.
*/
public class p5p14Dao extends AbstractDao<p5p14, Long> {

    public static final String TABLENAME = "P5P14";

    /**
     * Properties of entity p5p14.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Fnav = new Property(1, Integer.class, "fnav", false, "FNAV");
        public final static Property Hig = new Property(2, Integer.class, "hig", false, "HIG");
        public final static Property Segh = new Property(3, Integer.class, "segh", false, "SEGH");
        public final static Property Sal = new Property(4, Integer.class, "sal", false, "SAL");
        public final static Property Vfap = new Property(5, Integer.class, "vfap", false, "VFAP");
        public final static Property Ttar = new Property(6, Integer.class, "ttar", false, "TTAR");
        public final static Property Sbdn = new Property(7, Integer.class, "sbdn", false, "SBDN");
        public final static Property Idta = new Property(8, Integer.class, "idta", false, "IDTA");
        public final static Property Memc = new Property(9, Integer.class, "memc", false, "MEMC");
        public final static Property Origen = new Property(10, Integer.class, "origen", false, "ORIGEN");
        public final static Property Id_formulario = new Property(11, Integer.class, "id_formulario", false, "ID_FORMULARIO");
        public final static Property Observaciones = new Property(12, String.class, "observaciones", false, "OBSERVACIONES");
    };


    public p5p14Dao(DaoConfig config) {
        super(config);
    }
    
    public p5p14Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'P5P14' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'FNAV' INTEGER," + // 1: fnav
                "'HIG' INTEGER," + // 2: hig
                "'SEGH' INTEGER," + // 3: segh
                "'SAL' INTEGER," + // 4: sal
                "'VFAP' INTEGER," + // 5: vfap
                "'TTAR' INTEGER," + // 6: ttar
                "'SBDN' INTEGER," + // 7: sbdn
                "'IDTA' INTEGER," + // 8: idta
                "'MEMC' INTEGER," + // 9: memc
                "'ORIGEN' INTEGER," + // 10: origen
                "'ID_FORMULARIO' INTEGER," + // 11: id_formulario
                "'OBSERVACIONES' TEXT);"); // 12: observaciones
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'P5P14'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, p5p14 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer fnav = entity.getFnav();
        if (fnav != null) {
            stmt.bindLong(2, fnav);
        }
 
        Integer hig = entity.getHig();
        if (hig != null) {
            stmt.bindLong(3, hig);
        }
 
        Integer segh = entity.getSegh();
        if (segh != null) {
            stmt.bindLong(4, segh);
        }
 
        Integer sal = entity.getSal();
        if (sal != null) {
            stmt.bindLong(5, sal);
        }
 
        Integer vfap = entity.getVfap();
        if (vfap != null) {
            stmt.bindLong(6, vfap);
        }
 
        Integer ttar = entity.getTtar();
        if (ttar != null) {
            stmt.bindLong(7, ttar);
        }
 
        Integer sbdn = entity.getSbdn();
        if (sbdn != null) {
            stmt.bindLong(8, sbdn);
        }
 
        Integer idta = entity.getIdta();
        if (idta != null) {
            stmt.bindLong(9, idta);
        }
 
        Integer memc = entity.getMemc();
        if (memc != null) {
            stmt.bindLong(10, memc);
        }
 
        Integer origen = entity.getOrigen();
        if (origen != null) {
            stmt.bindLong(11, origen);
        }
 
        Integer id_formulario = entity.getId_formulario();
        if (id_formulario != null) {
            stmt.bindLong(12, id_formulario);
        }
 
        String observaciones = entity.getObservaciones();
        if (observaciones != null) {
            stmt.bindString(13, observaciones);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public p5p14 readEntity(Cursor cursor, int offset) {
        p5p14 entity = new p5p14( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // fnav
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // hig
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // segh
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // sal
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // vfap
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // ttar
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // sbdn
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // idta
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // memc
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // origen
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // id_formulario
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // observaciones
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, p5p14 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFnav(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setHig(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setSegh(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setSal(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setVfap(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setTtar(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setSbdn(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setIdta(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setMemc(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setOrigen(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setId_formulario(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setObservaciones(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(p5p14 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(p5p14 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
