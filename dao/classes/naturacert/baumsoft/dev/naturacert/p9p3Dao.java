package naturacert.baumsoft.dev.naturacert;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import naturacert.baumsoft.dev.naturacert.p9p3;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table P9P3.
*/
public class p9p3Dao extends AbstractDao<p9p3, Long> {

    public static final String TABLENAME = "P9P3";

    /**
     * Properties of entity p9p3.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Fdec = new Property(1, Integer.class, "fdec", false, "FDEC");
        public final static Property Fuev = new Property(2, Integer.class, "fuev", false, "FUEV");
        public final static Property Fcec = new Property(3, Integer.class, "fcec", false, "FCEC");
        public final static Property Acae = new Property(4, Integer.class, "acae", false, "ACAE");
        public final static Property Adec = new Property(5, Integer.class, "adec", false, "ADEC");
        public final static Property Croa = new Property(6, Integer.class, "croa", false, "CROA");
        public final static Property Mach = new Property(7, Integer.class, "mach", false, "MACH");
        public final static Property Guad = new Property(8, Integer.class, "guad", false, "GUAD");
        public final static Property Herb = new Property(9, Integer.class, "herb", false, "HERB");
        public final static Property Origen = new Property(10, Integer.class, "origen", false, "ORIGEN");
        public final static Property Id_formulario = new Property(11, Integer.class, "id_formulario", false, "ID_FORMULARIO");
        public final static Property Observaciones = new Property(12, String.class, "observaciones", false, "OBSERVACIONES");
    };


    public p9p3Dao(DaoConfig config) {
        super(config);
    }
    
    public p9p3Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'P9P3' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'FDEC' INTEGER," + // 1: fdec
                "'FUEV' INTEGER," + // 2: fuev
                "'FCEC' INTEGER," + // 3: fcec
                "'ACAE' INTEGER," + // 4: acae
                "'ADEC' INTEGER," + // 5: adec
                "'CROA' INTEGER," + // 6: croa
                "'MACH' INTEGER," + // 7: mach
                "'GUAD' INTEGER," + // 8: guad
                "'HERB' INTEGER," + // 9: herb
                "'ORIGEN' INTEGER," + // 10: origen
                "'ID_FORMULARIO' INTEGER," + // 11: id_formulario
                "'OBSERVACIONES' TEXT);"); // 12: observaciones
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'P9P3'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, p9p3 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer fdec = entity.getFdec();
        if (fdec != null) {
            stmt.bindLong(2, fdec);
        }
 
        Integer fuev = entity.getFuev();
        if (fuev != null) {
            stmt.bindLong(3, fuev);
        }
 
        Integer fcec = entity.getFcec();
        if (fcec != null) {
            stmt.bindLong(4, fcec);
        }
 
        Integer acae = entity.getAcae();
        if (acae != null) {
            stmt.bindLong(5, acae);
        }
 
        Integer adec = entity.getAdec();
        if (adec != null) {
            stmt.bindLong(6, adec);
        }
 
        Integer croa = entity.getCroa();
        if (croa != null) {
            stmt.bindLong(7, croa);
        }
 
        Integer mach = entity.getMach();
        if (mach != null) {
            stmt.bindLong(8, mach);
        }
 
        Integer guad = entity.getGuad();
        if (guad != null) {
            stmt.bindLong(9, guad);
        }
 
        Integer herb = entity.getHerb();
        if (herb != null) {
            stmt.bindLong(10, herb);
        }
 
        Integer origen = entity.getOrigen();
        if (origen != null) {
            stmt.bindLong(11, origen);
        }
 
        Integer id_formulario = entity.getId_formulario();
        if (id_formulario != null) {
            stmt.bindLong(12, id_formulario);
        }
 
        String observaciones = entity.getObservaciones();
        if (observaciones != null) {
            stmt.bindString(13, observaciones);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public p9p3 readEntity(Cursor cursor, int offset) {
        p9p3 entity = new p9p3( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // fdec
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // fuev
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // fcec
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // acae
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // adec
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // croa
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // mach
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // guad
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // herb
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // origen
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // id_formulario
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // observaciones
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, p9p3 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFdec(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setFuev(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setFcec(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setAcae(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setAdec(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setCroa(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setMach(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setGuad(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setHerb(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setOrigen(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setId_formulario(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setObservaciones(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(p9p3 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(p9p3 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
