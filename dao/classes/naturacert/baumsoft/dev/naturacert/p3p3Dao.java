package naturacert.baumsoft.dev.naturacert;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import naturacert.baumsoft.dev.naturacert.p3p3;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table P3P3.
*/
public class p3p3Dao extends AbstractDao<p3p3, Long> {

    public static final String TABLENAME = "P3P3";

    /**
     * Properties of entity p3p3.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Pceta = new Property(1, Integer.class, "pceta", false, "PCETA");
        public final static Property Egc = new Property(2, Integer.class, "egc", false, "EGC");
        public final static Property Phgc = new Property(3, Integer.class, "phgc", false, "PHGC");
        public final static Property Ncfc = new Property(4, Integer.class, "ncfc", false, "NCFC");
        public final static Property Crsc = new Property(5, Integer.class, "crsc", false, "CRSC");
        public final static Property Prea = new Property(6, Integer.class, "prea", false, "PREA");
        public final static Property Pgec = new Property(7, Integer.class, "pgec", false, "PGEC");
        public final static Property Origen = new Property(8, Integer.class, "origen", false, "ORIGEN");
        public final static Property Obser = new Property(9, String.class, "obser", false, "OBSER");
        public final static Property Id_formulario = new Property(10, Integer.class, "id_formulario", false, "ID_FORMULARIO");
    };


    public p3p3Dao(DaoConfig config) {
        super(config);
    }
    
    public p3p3Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'P3P3' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'PCETA' INTEGER," + // 1: pceta
                "'EGC' INTEGER," + // 2: egc
                "'PHGC' INTEGER," + // 3: phgc
                "'NCFC' INTEGER," + // 4: ncfc
                "'CRSC' INTEGER," + // 5: crsc
                "'PREA' INTEGER," + // 6: prea
                "'PGEC' INTEGER," + // 7: pgec
                "'ORIGEN' INTEGER," + // 8: origen
                "'OBSER' TEXT," + // 9: obser
                "'ID_FORMULARIO' INTEGER);"); // 10: id_formulario
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'P3P3'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, p3p3 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer pceta = entity.getPceta();
        if (pceta != null) {
            stmt.bindLong(2, pceta);
        }
 
        Integer egc = entity.getEgc();
        if (egc != null) {
            stmt.bindLong(3, egc);
        }
 
        Integer phgc = entity.getPhgc();
        if (phgc != null) {
            stmt.bindLong(4, phgc);
        }
 
        Integer ncfc = entity.getNcfc();
        if (ncfc != null) {
            stmt.bindLong(5, ncfc);
        }
 
        Integer crsc = entity.getCrsc();
        if (crsc != null) {
            stmt.bindLong(6, crsc);
        }
 
        Integer prea = entity.getPrea();
        if (prea != null) {
            stmt.bindLong(7, prea);
        }
 
        Integer pgec = entity.getPgec();
        if (pgec != null) {
            stmt.bindLong(8, pgec);
        }
 
        Integer origen = entity.getOrigen();
        if (origen != null) {
            stmt.bindLong(9, origen);
        }
 
        String obser = entity.getObser();
        if (obser != null) {
            stmt.bindString(10, obser);
        }
 
        Integer id_formulario = entity.getId_formulario();
        if (id_formulario != null) {
            stmt.bindLong(11, id_formulario);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public p3p3 readEntity(Cursor cursor, int offset) {
        p3p3 entity = new p3p3( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // pceta
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // egc
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // phgc
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // ncfc
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // crsc
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // prea
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // pgec
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // origen
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // obser
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10) // id_formulario
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, p3p3 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPceta(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setEgc(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setPhgc(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setNcfc(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setCrsc(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setPrea(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setPgec(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setOrigen(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setObser(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setId_formulario(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(p3p3 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(p3p3 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
